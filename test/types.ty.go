// Generated by tygo.  DO NOT EDIT!

package main

import "fmt"
import "github.com/ibelie/tygo"
import "math"

type Corpus uint

const (
	Corpus_UNIVERSAL Corpus = 0
	Corpus_WEB       Corpus = 1
	Corpus_IMAGES    Corpus = 2
	Corpus_LOCAL     Corpus = 3
	Corpus_NEWS      Corpus = 4
	Corpus_PRODUCTS  Corpus = 5
	Corpus_VIDEO     Corpus = 6
)

func (i Corpus) String() string {
	switch i {
	case Corpus_UNIVERSAL:
		return "UNIVERSAL"
	case Corpus_WEB:
		return "WEB"
	case Corpus_IMAGES:
		return "IMAGES"
	case Corpus_LOCAL:
		return "LOCAL"
	case Corpus_NEWS:
		return "NEWS"
	case Corpus_PRODUCTS:
		return "PRODUCTS"
	case Corpus_VIDEO:
		return "VIDEO"
	default:
		panic(fmt.Sprintf("[Tygo][Corpus] Unexpect enum value: %d", i))
		return "UNKNOWN"
	}
}

func (i Corpus) ByteSize() (size int) {
	if i != 0 {
		size = tygo.SizeVarint(uint64(i))
	}
	return
}

func (i Corpus) CachedSize() int {
	return i.ByteSize()
}

func (i Corpus) Serialize(output *tygo.ProtoBuf) {
	if i != 0 {
		output.WriteVarint(uint64(i))
	}
}

func (i *Corpus) Deserialize(input *tygo.ProtoBuf) (err error) {
	x, err := input.ReadVarint()
	*i = Corpus(x)
	return
}

type Vector2 struct {
	tygo.Tygo
	X float32 // float32
	Y float64 // fixedpoint<1, -10>
	B []byte  // bytes
	S string  // string
	E Corpus  // Corpus
	P *GoType // *GoType
}

func (s *Vector2) MaxFieldNum() int {
	return 6
}

func (s *Vector2) ByteSize() (size int) {
	if s != nil {
		// property: s.X
		// type: float32
		if s.X != 0 {
			size += 1 + 4
		}

		// property: s.Y
		// type: fixedpoint<1, -10>
		if s.Y != -10 {
			size += 1 + tygo.SizeVarint(uint64((s.Y - -10) * 10))
		}

		// property: s.B
		// type: bytes
		if len(s.B) > 0 {
			l := len([]byte(s.B))
			size += 1 + tygo.SizeVarint(uint64(l)) + l
		}

		// property: s.S
		// type: string
		if len(s.S) > 0 {
			l := len([]byte(s.S))
			size += 1 + tygo.SizeVarint(uint64(l)) + l
		}

		// property: s.E
		// type: Corpus
		if s.E != 0 {
			size += 1 + tygo.SizeVarint(uint64(s.E))
		}

		// property: s.P
		// type: *GoType
		if s.P != nil {
			tmp := s.P.ByteSize()
			size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

	}
	s.SetCachedSize(size)
	return
}

func (s *Vector2) Serialize(output *tygo.ProtoBuf) {
	if s != nil {
		// property: s.X
		// type: float32
		if s.X != 0 {
			output.WriteBytes(13) // tag: 13 MAKE_TAG(1, WireFixed32=5)
			output.WriteFixed32(math.Float32bits(s.X))
		}

		// property: s.Y
		// type: fixedpoint<1, -10>
		if s.Y != -10 {
			output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
			output.WriteVarint(uint64((s.Y - -10) * 10))
		}

		// property: s.B
		// type: bytes
		if len(s.B) > 0 {
			output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
			output.WriteBuf([]byte(s.B))
		}

		// property: s.S
		// type: string
		if len(s.S) > 0 {
			output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
			output.WriteBuf([]byte(s.S))
		}

		// property: s.E
		// type: Corpus
		if s.E != 0 {
			output.WriteBytes(40) // tag: 40 MAKE_TAG(5, WireVarint=0)
			output.WriteVarint(uint64(s.E))
		}

		// property: s.P
		// type: *GoType
		if s.P != nil {
			output.WriteBytes(50) // tag: 50 MAKE_TAG(6, WireBytes=2)
			output.WriteVarint(uint64(s.P.CachedSize()))
			s.P.Serialize(output)
		}

	}
}

func (s *Vector2) Deserialize(input *tygo.ProtoBuf) (err error) {
	object_tmp_1: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(127); err != nil {
			return
		}
		switch tag >> 3 {
		// property: s.X
		case 1:
			if tag == 13 { // MAKE_TAG(1, WireFixed32=5)
				// type: float32
				if x, e := input.ReadFixed32(); e == nil {
					s.X = math.Float32frombits(x)
				} else {
					err = e
					return
				}
				continue object_tmp_1 // next tag for Vector2
				if input.ExpectBytes(16) { // tag: 16 MAKE_TAG(2, WireVarint=0)
					goto object_tmp_2 // goto case 2
				}
			}
		// property: s.Y
		case 2:
			if tag == 16 { // MAKE_TAG(2, WireVarint=0)
			object_tmp_2:
				// type: fixedpoint<1, -10>
				if x, e := input.ReadVarint(); e == nil {
					s.Y = float64(x) / 10 + -10
				} else {
					err = e
					return
				}
				continue object_tmp_1 // next tag for Vector2
				if input.ExpectBytes(26) { // tag: 26 MAKE_TAG(3, WireBytes=2)
					goto object_tmp_3 // goto case 3
				}
			}
		// property: s.B
		case 3:
			if tag == 26 { // MAKE_TAG(3, WireBytes=2)
			object_tmp_3:
				// type: bytes
				if x, e := input.ReadBuf(); e == nil {
					s.B = make([]byte, len(x))
					copy(s.B, x)
				} else {
					err = e
					return
				}
				continue object_tmp_1 // next tag for Vector2
				if input.ExpectBytes(34) { // tag: 34 MAKE_TAG(4, WireBytes=2)
					goto object_tmp_4 // goto case 4
				}
			}
		// property: s.S
		case 4:
			if tag == 34 { // MAKE_TAG(4, WireBytes=2)
			object_tmp_4:
				// type: string
				if x, e := input.ReadBuf(); e == nil {
					s.S = string(x)
				} else {
					err = e
					return
				}
				continue object_tmp_1 // next tag for Vector2
				if input.ExpectBytes(40) { // tag: 40 MAKE_TAG(5, WireVarint=0)
					goto object_tmp_5 // goto case 5
				}
			}
		// property: s.E
		case 5:
			if tag == 40 { // MAKE_TAG(5, WireVarint=0)
			object_tmp_5:
				// type: Corpus
				if x, e := input.ReadVarint(); e == nil {
					s.E = Corpus(x)
				} else {
					err = e
					return
				}
				continue object_tmp_1 // next tag for Vector2
				if input.ExpectBytes(50) { // tag: 50 MAKE_TAG(6, WireBytes=2)
					goto object_tmp_6 // goto case 6
				}
			}
		// property: s.P
		case 6:
			if tag == 50 { // MAKE_TAG(6, WireBytes=2)
			object_tmp_6:
				// type: *GoType
				if x, e := input.ReadBuf(); e == nil {
					if s.P == nil {
						s.P = &GoType{}
					}
					if len(x) > 0 {
						if err = s.P.Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_1 // next tag for Vector2
				if input.ExpectEnd() {
					break object_tmp_1 // end for Vector2
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}

type Fighter_Part1 struct {
	tygo.Tygo
	Pos     *Vector2           // *Vector2
	IsAwake bool               // bool
	Hp      float32            // float32
	Poss    map[int32]*Vector2 // map[int32]*Vector2
	Posi    map[int32]float32  // map[int32]float32
	Posl    []*Vector2         // []*Vector2
	Posll   [][]*Vector2       // [][]*Vector2
	Pyl     []*GoType          // []*GoType
	Pyd     map[int32]*GoType  // map[int32]*GoType
	Pyv1    interface{}        // variant<int32, *GoType>
	Pyv2    interface{}        // variant<int32, *GoType>
}

func (s *Fighter_Part1) MaxFieldNum() int {
	return 11
}

func (s *Fighter_Part1) ByteSize() (size int) {
	if s != nil {
		// property: s.Pos
		// type: *Vector2
		if s.Pos != nil {
			tmp := s.Pos.ByteSize()
			size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.IsAwake
		// type: bool
		if s.IsAwake {
			size += 1 + 1
		}

		// property: s.Hp
		// type: float32
		if s.Hp != 0 {
			size += 1 + 4
		}

		// property: s.Poss
		// type: map[int32]*Vector2
		if len(s.Poss) > 0 {
			for k, v := range s.Poss {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: *Vector2
				if v != nil {
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Posi
		// type: map[int32]float32
		if len(s.Posi) > 0 {
			for k, v := range s.Posi {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: float32
				if v != 0 {
					tmp += 1 + 4
				}
				size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Posl
		// type: []*Vector2
		if len(s.Posl) > 0 {
			for _, e := range s.Posl {
				// list element
				// type: *Vector2
				if e != nil {
					tmp := e.ByteSize()
					size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
				} else {
					size += 1 + 1
				}
			}
		}

		// property: s.Posll
		// type: [][]*Vector2
		if len(s.Posll) > 0 {
			for _, e := range s.Posll {
				tmp := 0
				// list element
				// type: []*Vector2
				if len(e) > 0 {
					for _, e := range e {
						// list element
						// type: *Vector2
						if e != nil {
							tmpp := e.ByteSize()
							tmp += tygo.SizeVarint(uint64(tmpp)) + tmpp
						} else {
							tmp += 1
						}
					}
				}
				size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Pyl
		// type: []*GoType
		if len(s.Pyl) > 0 {
			for _, e := range s.Pyl {
				// list element
				// type: *GoType
				if e != nil {
					tmp := e.ByteSize()
					size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
				} else {
					size += 1 + 1
				}
			}
		}

		// property: s.Pyd
		// type: map[int32]*GoType
		if len(s.Pyd) > 0 {
			for k, v := range s.Pyd {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: *GoType
				if v != nil {
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Pyv1
		// type: variant<int32, *GoType>
		if s.Pyv1 != nil {
			tmp := 0
			switch v := s.Pyv1.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: *GoType
			case *GoType:
				// type: *GoType
				{
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, *GoType>: %v", v))
			}
			size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Pyv2
		// type: variant<int32, *GoType>
		if s.Pyv2 != nil {
			tmp := 0
			switch v := s.Pyv2.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: *GoType
			case *GoType:
				// type: *GoType
				{
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, *GoType>: %v", v))
			}
			size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

	}
	s.SetCachedSize(size)
	return
}

func (s *Fighter_Part1) Serialize(output *tygo.ProtoBuf) {
	if s != nil {
		// property: s.Pos
		// type: *Vector2
		if s.Pos != nil {
			output.WriteBytes(10) // tag: 10 MAKE_TAG(1, WireBytes=2)
			output.WriteVarint(uint64(s.Pos.CachedSize()))
			s.Pos.Serialize(output)
		}

		// property: s.IsAwake
		// type: bool
		if s.IsAwake {
			output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
			output.WriteBytes(1)
		}

		// property: s.Hp
		// type: float32
		if s.Hp != 0 {
			output.WriteBytes(29) // tag: 29 MAKE_TAG(3, WireFixed32=5)
			output.WriteFixed32(math.Float32bits(s.Hp))
		}

		// property: s.Poss
		// type: map[int32]*Vector2
		if len(s.Poss) > 0 {
			for k, v := range s.Poss {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: *Vector2
				if v != nil {
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: *Vector2
				if v != nil {
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			}
		}

		// property: s.Posi
		// type: map[int32]float32
		if len(s.Posi) > 0 {
			for k, v := range s.Posi {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: float32
				if v != 0 {
					tmp += 1 + 4
				}
				output.WriteBytes(42) // tag: 42 MAKE_TAG(5, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: float32
				if v != 0 {
					output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
					output.WriteFixed32(math.Float32bits(v))
				}
			}
		}

		// property: s.Posl
		// type: []*Vector2
		if len(s.Posl) > 0 {
			for _, e := range s.Posl {
				// list element
				output.WriteBytes(50) // tag: 50 MAKE_TAG(6, WireBytes=2)
				// type: *Vector2
				if e != nil {
					output.WriteVarint(uint64(e.CachedSize()))
					e.Serialize(output)
				} else {
					output.WriteBytes(0)
				}
			}
		}

		// property: s.Posll
		// type: [][]*Vector2
		if len(s.Posll) > 0 {
			for _, e := range s.Posll {
				tmp := 0
				// list element size
				// type: []*Vector2
				if len(e) > 0 {
					for _, e := range e {
						// list element
						// type: *Vector2
						if e != nil {
							tmpp := e.CachedSize()
							tmp += tygo.SizeVarint(uint64(tmpp)) + tmpp
						} else {
							tmp += 1
						}
					}
				}
				output.WriteBytes(58) // tag: 58 MAKE_TAG(7, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// list element serialize
				// type: []*Vector2
				if len(e) > 0 {
					for _, e := range e {
						// list element
						// type: *Vector2
						if e != nil {
							output.WriteVarint(uint64(e.CachedSize()))
							e.Serialize(output)
						} else {
							output.WriteBytes(0)
						}
					}
				}
			}
		}

		// property: s.Pyl
		// type: []*GoType
		if len(s.Pyl) > 0 {
			for _, e := range s.Pyl {
				// list element
				output.WriteBytes(66) // tag: 66 MAKE_TAG(8, WireBytes=2)
				// type: *GoType
				if e != nil {
					output.WriteVarint(uint64(e.CachedSize()))
					e.Serialize(output)
				} else {
					output.WriteBytes(0)
				}
			}
		}

		// property: s.Pyd
		// type: map[int32]*GoType
		if len(s.Pyd) > 0 {
			for k, v := range s.Pyd {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: *GoType
				if v != nil {
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				output.WriteBytes(74) // tag: 74 MAKE_TAG(9, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: *GoType
				if v != nil {
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			}
		}

		// property: s.Pyv1
		// type: variant<int32, *GoType>
		if s.Pyv1 != nil {
			tmp := 0
			switch v := s.Pyv1.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: *GoType
			case *GoType:
				// type: *GoType
				{
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, *GoType>: %v", v))
			}
			output.WriteBytes(82) // tag: 82 MAKE_TAG(10, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.Pyv1.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: *GoType
			case *GoType:
				// type: *GoType
				{
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, *GoType>: %v", v))
			}
		}

		// property: s.Pyv2
		// type: variant<int32, *GoType>
		if s.Pyv2 != nil {
			tmp := 0
			switch v := s.Pyv2.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: *GoType
			case *GoType:
				// type: *GoType
				{
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, *GoType>: %v", v))
			}
			output.WriteBytes(90) // tag: 90 MAKE_TAG(11, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.Pyv2.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: *GoType
			case *GoType:
				// type: *GoType
				{
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, *GoType>: %v", v))
			}
		}

	}
}

func (s *Fighter_Part1) Deserialize(input *tygo.ProtoBuf) (err error) {
	object_tmp_7: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(127); err != nil {
			return
		}
		switch tag >> 3 {
		// property: s.Pos
		case 1:
			if tag == 10 { // MAKE_TAG(1, WireBytes=2)
				// type: *Vector2
				if x, e := input.ReadBuf(); e == nil {
					if s.Pos == nil {
						s.Pos = &Vector2{}
					}
					if len(x) > 0 {
						if err = s.Pos.Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(16) { // tag: 16 MAKE_TAG(2, WireVarint=0)
					goto object_tmp_8 // goto case 2
				}
			}
		// property: s.IsAwake
		case 2:
			if tag == 16 { // MAKE_TAG(2, WireVarint=0)
			object_tmp_8:
				// type: bool
				if x, e := input.ReadByte(); e == nil {
					s.IsAwake = x != 0
				} else {
					err = e
					return
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(29) { // tag: 29 MAKE_TAG(3, WireFixed32=5)
					goto object_tmp_9 // goto case 3
				}
			}
		// property: s.Hp
		case 3:
			if tag == 29 { // MAKE_TAG(3, WireFixed32=5)
			object_tmp_9:
				// type: float32
				if x, e := input.ReadFixed32(); e == nil {
					s.Hp = math.Float32frombits(x)
				} else {
					err = e
					return
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(34) { // tag: 34 MAKE_TAG(4, WireBytes=2)
					goto object_tmp_12 // goto case 4
				}
			}
		// property: s.Poss
		case 4:
			if tag == 34 { // MAKE_TAG(4, WireBytes=2)
			object_tmp_12:
				// type: map[int32]*Vector2
				loop_tmp_10: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_10 int32
						var tmp_11 *Vector2
						dict_tmp_10: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_10 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_11 // goto case 2
									}
									continue dict_tmp_10 // next tag for map[int32]*Vector2
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_11:
									// type: *Vector2
									if x, e := tmpi.ReadBuf(); e == nil {
										if tmp_11 == nil {
											tmp_11 = &Vector2{}
										}
										if len(x) > 0 {
											if err = tmp_11.Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
												return
											}
										}
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_10 // end for map[int32]*Vector2
									}
									continue dict_tmp_10 // next tag for map[int32]*Vector2
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Poss[tmp_10] = tmp_11
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(34) { // tag: 34 MAKE_TAG(4, WireBytes=2)
						break loop_tmp_10 // end for map[int32]*Vector2
					}
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(42) { // tag: 42 MAKE_TAG(5, WireBytes=2)
					goto object_tmp_15 // goto case 5
				}
			}
		// property: s.Posi
		case 5:
			if tag == 42 { // MAKE_TAG(5, WireBytes=2)
			object_tmp_15:
				// type: map[int32]float32
				loop_tmp_13: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_13 int32
						var tmp_14 float32
						dict_tmp_13: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_13 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(21) { // tag: 21 MAKE_TAG(2, WireFixed32=5)
										goto dict_tmp_14 // goto case 2
									}
									continue dict_tmp_13 // next tag for map[int32]float32
								}
							case 2:
								if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
								dict_tmp_14:
									// type: float32
									if x, e := tmpi.ReadFixed32(); e == nil {
										tmp_14 = math.Float32frombits(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_13 // end for map[int32]float32
									}
									continue dict_tmp_13 // next tag for map[int32]float32
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Posi[tmp_13] = tmp_14
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(42) { // tag: 42 MAKE_TAG(5, WireBytes=2)
						break loop_tmp_13 // end for map[int32]float32
					}
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(50) { // tag: 50 MAKE_TAG(6, WireBytes=2)
					goto object_tmp_17 // goto case 6
				}
			}
		// property: s.Posl
		case 6:
			if tag == 50 { // MAKE_TAG(6, WireBytes=2)
			object_tmp_17:
				// type: []*Vector2
				loop_tmp_16: for {
					var tmp_16 *Vector2
					// type: *Vector2
					if x, e := input.ReadBuf(); e == nil {
						if tmp_16 == nil {
							tmp_16 = &Vector2{}
						}
						if len(x) > 0 {
							if err = tmp_16.Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
								return
							}
						}
					} else {
						err = e
						return
					}
					s.Posl = append(s.Posl, tmp_16)
					if !input.ExpectBytes(50) { // tag: 50 MAKE_TAG(6, WireBytes=2)
						break loop_tmp_16 // end for []*Vector2
					}
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(58) { // tag: 58 MAKE_TAG(7, WireBytes=2)
					goto object_tmp_20 // goto case 7
				}
			}
		// property: s.Posll
		case 7:
			if tag == 58 { // MAKE_TAG(7, WireBytes=2)
			object_tmp_20:
				// type: [][]*Vector2
				loop_tmp_18: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_18 []*Vector2
						for !tmpi.ExpectEnd() {
							// type: []*Vector2
							var tmp_19 *Vector2
							// type: *Vector2
							if x, e := tmpi.ReadBuf(); e == nil {
								if tmp_19 == nil {
									tmp_19 = &Vector2{}
								}
								if len(x) > 0 {
									if err = tmp_19.Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							tmp_18 = append(tmp_18, tmp_19)
						}
						s.Posll = append(s.Posll, tmp_18)
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(58) { // tag: 58 MAKE_TAG(7, WireBytes=2)
						break loop_tmp_18 // end for [][]*Vector2
					}
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(66) { // tag: 66 MAKE_TAG(8, WireBytes=2)
					goto object_tmp_22 // goto case 8
				}
			}
		// property: s.Pyl
		case 8:
			if tag == 66 { // MAKE_TAG(8, WireBytes=2)
			object_tmp_22:
				// type: []*GoType
				loop_tmp_21: for {
					var tmp_21 *GoType
					// type: *GoType
					if x, e := input.ReadBuf(); e == nil {
						if tmp_21 == nil {
							tmp_21 = &GoType{}
						}
						if len(x) > 0 {
							if err = tmp_21.Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
								return
							}
						}
					} else {
						err = e
						return
					}
					s.Pyl = append(s.Pyl, tmp_21)
					if !input.ExpectBytes(66) { // tag: 66 MAKE_TAG(8, WireBytes=2)
						break loop_tmp_21 // end for []*GoType
					}
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(74) { // tag: 74 MAKE_TAG(9, WireBytes=2)
					goto object_tmp_25 // goto case 9
				}
			}
		// property: s.Pyd
		case 9:
			if tag == 74 { // MAKE_TAG(9, WireBytes=2)
			object_tmp_25:
				// type: map[int32]*GoType
				loop_tmp_23: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_23 int32
						var tmp_24 *GoType
						dict_tmp_23: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_23 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_24 // goto case 2
									}
									continue dict_tmp_23 // next tag for map[int32]*GoType
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_24:
									// type: *GoType
									if x, e := tmpi.ReadBuf(); e == nil {
										if tmp_24 == nil {
											tmp_24 = &GoType{}
										}
										if len(x) > 0 {
											if err = tmp_24.Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
												return
											}
										}
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_23 // end for map[int32]*GoType
									}
									continue dict_tmp_23 // next tag for map[int32]*GoType
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Pyd[tmp_23] = tmp_24
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(74) { // tag: 74 MAKE_TAG(9, WireBytes=2)
						break loop_tmp_23 // end for map[int32]*GoType
					}
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(82) { // tag: 82 MAKE_TAG(10, WireBytes=2)
					goto object_tmp_27 // goto case 10
				}
			}
		// property: s.Pyv1
		case 10:
			if tag == 82 { // MAKE_TAG(10, WireBytes=2)
			object_tmp_27:
				// type: variant<int32, *GoType>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_26: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.Pyv1 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_26 // next tag for variant<int32, *GoType>
						}
					case 2:
						if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
							// type: *GoType
							if x, e := tmpi.ReadBuf(); e == nil {
								if s.Pyv1 == nil {
									s.Pyv1 = &GoType{}
								}
								if len(x) > 0 {
									if err = s.Pyv1.(*GoType).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							continue variant_tmp_26 // next tag for variant<int32, *GoType>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectBytes(90) { // tag: 90 MAKE_TAG(11, WireBytes=2)
					goto object_tmp_29 // goto case 11
				}
			}
		// property: s.Pyv2
		case 11:
			if tag == 90 { // MAKE_TAG(11, WireBytes=2)
			object_tmp_29:
				// type: variant<int32, *GoType>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_28: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.Pyv2 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_28 // next tag for variant<int32, *GoType>
						}
					case 2:
						if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
							// type: *GoType
							if x, e := tmpi.ReadBuf(); e == nil {
								if s.Pyv2 == nil {
									s.Pyv2 = &GoType{}
								}
								if len(x) > 0 {
									if err = s.Pyv2.(*GoType).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							continue variant_tmp_28 // next tag for variant<int32, *GoType>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_7 // next tag for Fighter_Part1
				if input.ExpectEnd() {
					break object_tmp_7 // end for Fighter_Part1
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}

type Fighter_Part2 struct {
	Fighter_Part1
	Fl []float32         // []float32
	Bl [][]byte          // []bytes
	Sl []string          // []string
	Bd map[string][]byte // map[string]bytes
	Sd map[int32]string  // map[int32]string
	El []Corpus          // []Corpus
	Ed map[int32]Corpus  // map[int32]Corpus
	Ll [][]float32       // [][]float32
}

func (s *Fighter_Part2) MaxFieldNum() int {
	return 19
}

func (s *Fighter_Part2) ByteSize() (size int) {
	if s != nil {
		size += s.Fighter_Part1.ByteSize()
		// property: s.Fl
		// type: []float32
		if len(s.Fl) > 0 {
			tmp := len(s.Fl) * 4
			size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Bl
		// type: []bytes
		if len(s.Bl) > 0 {
			for _, e := range s.Bl {
				// list element
				// type: bytes
				if len(e) > 0 {
					l := len([]byte(e))
					size += 1 + tygo.SizeVarint(uint64(l)) + l
				} else {
					size += 1 + 1
				}
			}
		}

		// property: s.Sl
		// type: []string
		if len(s.Sl) > 0 {
			for _, e := range s.Sl {
				// list element
				// type: string
				if len(e) > 0 {
					l := len([]byte(e))
					size += 1 + tygo.SizeVarint(uint64(l)) + l
				} else {
					size += 1 + 1
				}
			}
		}

		// property: s.Bd
		// type: map[string]bytes
		if len(s.Bd) > 0 {
			for k, v := range s.Bd {
				tmp := 0
				// dict key
				// type: string
				if len(k) > 0 {
					l := len([]byte(k))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
				// dict value
				// type: bytes
				if len(v) > 0 {
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
				size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Sd
		// type: map[int32]string
		if len(s.Sd) > 0 {
			for k, v := range s.Sd {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: string
				if len(v) > 0 {
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
				size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.El
		// type: []Corpus
		if len(s.El) > 0 {
			tmp := 0
			for _, e := range s.El {
				// list element
				// type: Corpus
				tmp += tygo.SizeVarint(uint64(e))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Ed
		// type: map[int32]Corpus
		if len(s.Ed) > 0 {
			for k, v := range s.Ed {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: Corpus
				if v != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(v))
				}
				size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Ll
		// type: [][]float32
		if len(s.Ll) > 0 {
			for _, e := range s.Ll {
				// list element
				// type: []float32
				if len(e) > 0 {
					tmp := len(e) * 4
					size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
				} else {
					size += 2 + 1
				}
			}
		}

	}
	s.SetCachedSize(size)
	return
}

func (s *Fighter_Part2) Serialize(output *tygo.ProtoBuf) {
	if s != nil {
		s.Fighter_Part1.Serialize(output)
		// property: s.Fl
		// type: []float32
		if len(s.Fl) > 0 {
			tmp := len(s.Fl) * 4
			output.WriteBytes(98) // tag: 98 MAKE_TAG(12, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			for _, e := range s.Fl {
				// list element serialize
				// type: float32
				output.WriteFixed32(math.Float32bits(e))
			}
		}

		// property: s.Bl
		// type: []bytes
		if len(s.Bl) > 0 {
			for _, e := range s.Bl {
				// list element
				output.WriteBytes(106) // tag: 106 MAKE_TAG(13, WireBytes=2)
				// type: bytes
				if len(e) > 0 {
					output.WriteBuf([]byte(e))
				} else {
					output.WriteBytes(0)
				}
			}
		}

		// property: s.Sl
		// type: []string
		if len(s.Sl) > 0 {
			for _, e := range s.Sl {
				// list element
				output.WriteBytes(114) // tag: 114 MAKE_TAG(14, WireBytes=2)
				// type: string
				if len(e) > 0 {
					output.WriteBuf([]byte(e))
				} else {
					output.WriteBytes(0)
				}
			}
		}

		// property: s.Bd
		// type: map[string]bytes
		if len(s.Bd) > 0 {
			for k, v := range s.Bd {
				tmp := 0
				// dict key size
				// type: string
				if len(k) > 0 {
					l := len([]byte(k))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
				// dict value size
				// type: bytes
				if len(v) > 0 {
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
				output.WriteBytes(122) // tag: 122 MAKE_TAG(15, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: string
				if len(k) > 0 {
					output.WriteBytes(10) // tag: 10 MAKE_TAG(1, WireBytes=2)
					output.WriteBuf([]byte(k))
				}
				// dict value serialize
				// type: bytes
				if len(v) > 0 {
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteBuf([]byte(v))
				}
			}
		}

		// property: s.Sd
		// type: map[int32]string
		if len(s.Sd) > 0 {
			for k, v := range s.Sd {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: string
				if len(v) > 0 {
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
				output.WriteBytes(130, 1) // tag: 130 MAKE_TAG(16, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: string
				if len(v) > 0 {
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteBuf([]byte(v))
				}
			}
		}

		// property: s.El
		// type: []Corpus
		if len(s.El) > 0 {
			tmp := 0
			for _, e := range s.El {
				// list element size
				// type: Corpus
				tmp += tygo.SizeVarint(uint64(e))
			}
			output.WriteBytes(138, 1) // tag: 138 MAKE_TAG(17, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			for _, e := range s.El {
				// list element serialize
				// type: Corpus
				output.WriteVarint(uint64(e))
			}
		}

		// property: s.Ed
		// type: map[int32]Corpus
		if len(s.Ed) > 0 {
			for k, v := range s.Ed {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: Corpus
				if v != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(v))
				}
				output.WriteBytes(146, 1) // tag: 146 MAKE_TAG(18, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: Corpus
				if v != 0 {
					output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
					output.WriteVarint(uint64(v))
				}
			}
		}

		// property: s.Ll
		// type: [][]float32
		if len(s.Ll) > 0 {
			for _, e := range s.Ll {
				// list element
				// type: []float32
				if len(e) > 0 {
					tmp := len(e) * 4
					output.WriteBytes(154, 1) // tag: 154 MAKE_TAG(19, WireBytes=2)
					output.WriteVarint(uint64(tmp))
					for _, e := range e {
						// list element serialize
						// type: float32
						output.WriteFixed32(math.Float32bits(e))
					}
				} else {
					output.WriteBytes(154, 1) // tag: 154 MAKE_TAG(19, WireBytes=2)
					output.WriteBytes(0)
				}
			}
		}

	}
}

func (s *Fighter_Part2) Deserialize(input *tygo.ProtoBuf) (err error) {
	if err = s.Fighter_Part1.Deserialize(input); err == nil {
		input.Reset()
	} else {
		return
	}
	object_tmp_30: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(1023); err != nil {
			return
		}
		switch (tag >> 3) - 11 {
		// property: s.Fl
		case 1:
			if tag == 101 || tag == 98 { // MAKE_TAG(12, WireFixed32=5) || MAKE_TAG(12, WireBytes=2)
				// type: []float32
				if tag == 101 { // MAKE_TAG(12, WireFixed32=5)
					loop_tmp_31: for {
						var tmp_31 float32
						// type: float32
						if x, e := input.ReadFixed32(); e == nil {
							tmp_31 = math.Float32frombits(x)
						} else {
							err = e
							return
						}
						s.Fl = append(s.Fl, tmp_31)
						if !input.ExpectBytes(101) { // tag: 101 MAKE_TAG(12, WireFixed32=5)
							break loop_tmp_31 // end for []float32
						}
					}
				} else if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					var tmp_31 float32
					for !tmpi.ExpectEnd() {
						// type: float32
						if x, e := tmpi.ReadFixed32(); e == nil {
							tmp_31 = math.Float32frombits(x)
						} else {
							err = e
							return
						}
					}
					s.Fl = append(s.Fl, tmp_31)
				} else {
					err = e
					return
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectBytes(106) { // tag: 106 MAKE_TAG(13, WireBytes=2)
					goto object_tmp_33 // goto case 2
				}
			}
		// property: s.Bl
		case 2:
			if tag == 106 { // MAKE_TAG(13, WireBytes=2)
			object_tmp_33:
				// type: []bytes
				loop_tmp_32: for {
					var tmp_32 []byte
					// type: bytes
					if x, e := input.ReadBuf(); e == nil {
						tmp_32 = make([]byte, len(x))
						copy(tmp_32, x)
					} else {
						err = e
						return
					}
					s.Bl = append(s.Bl, tmp_32)
					if !input.ExpectBytes(106) { // tag: 106 MAKE_TAG(13, WireBytes=2)
						break loop_tmp_32 // end for []bytes
					}
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectBytes(114) { // tag: 114 MAKE_TAG(14, WireBytes=2)
					goto object_tmp_35 // goto case 3
				}
			}
		// property: s.Sl
		case 3:
			if tag == 114 { // MAKE_TAG(14, WireBytes=2)
			object_tmp_35:
				// type: []string
				loop_tmp_34: for {
					var tmp_34 string
					// type: string
					if x, e := input.ReadBuf(); e == nil {
						tmp_34 = string(x)
					} else {
						err = e
						return
					}
					s.Sl = append(s.Sl, tmp_34)
					if !input.ExpectBytes(114) { // tag: 114 MAKE_TAG(14, WireBytes=2)
						break loop_tmp_34 // end for []string
					}
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectBytes(122) { // tag: 122 MAKE_TAG(15, WireBytes=2)
					goto object_tmp_38 // goto case 4
				}
			}
		// property: s.Bd
		case 4:
			if tag == 122 { // MAKE_TAG(15, WireBytes=2)
			object_tmp_38:
				// type: map[string]bytes
				loop_tmp_36: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_36 string
						var tmp_37 []byte
						dict_tmp_36: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 10 { // MAKE_TAG(1, WireBytes=2)
									// type: string
									if x, e := tmpi.ReadBuf(); e == nil {
										tmp_36 = string(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_37 // goto case 2
									}
									continue dict_tmp_36 // next tag for map[string]bytes
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_37:
									// type: bytes
									if x, e := tmpi.ReadBuf(); e == nil {
										tmp_37 = make([]byte, len(x))
										copy(tmp_37, x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_36 // end for map[string]bytes
									}
									continue dict_tmp_36 // next tag for map[string]bytes
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Bd[tmp_36] = tmp_37
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(122) { // tag: 122 MAKE_TAG(15, WireBytes=2)
						break loop_tmp_36 // end for map[string]bytes
					}
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectBytes(130, 1) { // tag: 130 MAKE_TAG(16, WireBytes=2)
					goto object_tmp_41 // goto case 5
				}
			}
		// property: s.Sd
		case 5:
			if tag == 130 { // MAKE_TAG(16, WireBytes=2)
			object_tmp_41:
				// type: map[int32]string
				loop_tmp_39: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_39 int32
						var tmp_40 string
						dict_tmp_39: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_39 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_40 // goto case 2
									}
									continue dict_tmp_39 // next tag for map[int32]string
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_40:
									// type: string
									if x, e := tmpi.ReadBuf(); e == nil {
										tmp_40 = string(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_39 // end for map[int32]string
									}
									continue dict_tmp_39 // next tag for map[int32]string
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Sd[tmp_39] = tmp_40
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(130, 1) { // tag: 130 MAKE_TAG(16, WireBytes=2)
						break loop_tmp_39 // end for map[int32]string
					}
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectBytes(136, 1) { // tag: 136 MAKE_TAG(17, WireVarint=0)
					goto object_tmp_43 // goto case 6
				}
			}
		// property: s.El
		case 6:
			if tag == 136 || tag == 138 { // MAKE_TAG(17, WireVarint=0) || MAKE_TAG(17, WireBytes=2)
			object_tmp_43:
				// type: []Corpus
				if tag == 136 { // MAKE_TAG(17, WireVarint=0)
					loop_tmp_42: for {
						var tmp_42 Corpus
						// type: Corpus
						if x, e := input.ReadVarint(); e == nil {
							tmp_42 = Corpus(x)
						} else {
							err = e
							return
						}
						s.El = append(s.El, tmp_42)
						if !input.ExpectBytes(136, 1) { // tag: 136 MAKE_TAG(17, WireVarint=0)
							break loop_tmp_42 // end for []Corpus
						}
					}
				} else if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					var tmp_42 Corpus
					for !tmpi.ExpectEnd() {
						// type: Corpus
						if x, e := tmpi.ReadVarint(); e == nil {
							tmp_42 = Corpus(x)
						} else {
							err = e
							return
						}
					}
					s.El = append(s.El, tmp_42)
				} else {
					err = e
					return
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectBytes(146, 1) { // tag: 146 MAKE_TAG(18, WireBytes=2)
					goto object_tmp_46 // goto case 7
				}
			}
		// property: s.Ed
		case 7:
			if tag == 146 { // MAKE_TAG(18, WireBytes=2)
			object_tmp_46:
				// type: map[int32]Corpus
				loop_tmp_44: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_44 int32
						var tmp_45 Corpus
						dict_tmp_44: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_44 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(16) { // tag: 16 MAKE_TAG(2, WireVarint=0)
										goto dict_tmp_45 // goto case 2
									}
									continue dict_tmp_44 // next tag for map[int32]Corpus
								}
							case 2:
								if tmpg == 16 { // MAKE_TAG(2, WireVarint=0)
								dict_tmp_45:
									// type: Corpus
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_45 = Corpus(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_44 // end for map[int32]Corpus
									}
									continue dict_tmp_44 // next tag for map[int32]Corpus
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Ed[tmp_44] = tmp_45
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(146, 1) { // tag: 146 MAKE_TAG(18, WireBytes=2)
						break loop_tmp_44 // end for map[int32]Corpus
					}
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectBytes(154, 1) { // tag: 154 MAKE_TAG(19, WireBytes=2)
					goto object_tmp_49 // goto case 8
				}
			}
		// property: s.Ll
		case 8:
			if tag == 154 { // MAKE_TAG(19, WireBytes=2)
			object_tmp_49:
				// type: [][]float32
				loop_tmp_47: for {
					var tmp_47 []float32
					// type: []float32
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_48 float32
						for !tmpi.ExpectEnd() {
							// type: float32
							if x, e := tmpi.ReadFixed32(); e == nil {
								tmp_48 = math.Float32frombits(x)
							} else {
								err = e
								return
							}
						}
						tmp_47 = append(tmp_47, tmp_48)
					} else {
						err = e
						return
					}
					s.Ll = append(s.Ll, tmp_47)
					if !input.ExpectBytes(157, 1) { // tag: 157 MAKE_TAG(19, WireFixed32=5)
						break loop_tmp_47 // end for [][]float32
					}
				}
				continue object_tmp_30 // next tag for Fighter_Part2
				if input.ExpectEnd() {
					break object_tmp_30 // end for Fighter_Part2
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}

type Fighter struct {
	Fighter_Part2
	V0  interface{}                     // variant<int32, float32, bytes, *Vector2>
	V1  interface{}                     // variant<int32, float32, bytes, *Vector2>
	V2  interface{}                     // variant<int32, float32, bytes, *Vector2>
	V3  interface{}                     // variant<int32, float32, bytes, *Vector2>
	V4  interface{}                     // variant<int32, float32, bytes, *Vector2>
	Vl  []interface{}                   // []variant<int32, fixedpoint<3, 0>, string, *Vector2>
	Vd  map[int32]interface{}           // map[int32]variant<Corpus, float64, string, *Vector2>
	Ld  map[int32][]interface{}         // map[int32][]variant<Corpus, float64, string, *Vector2>
	Fld map[int32][]float32             // map[int32][]float32
	Dd  map[int32]map[int32]interface{} // map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
	Fdd map[int32]map[int32]float32     // map[int32]map[int32]float32
	Nv  interface{}                     // variant<nil, int32>
	Lv  interface{}                     // variant<int32, []variant<float32, string>>
	Flv interface{}                     // variant<int32, []float32>
	Dv  interface{}                     // variant<int32, map[int32]variant<float32, string>>
	Fdv interface{}                     // variant<int32, map[int32]float32>
}

func (s *Fighter) MaxFieldNum() int {
	return 35
}

func (s *Fighter) ByteSize() (size int) {
	if s != nil {
		size += s.Fighter_Part2.ByteSize()
		// property: s.V0
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V0 != nil {
			tmp := 0
			switch v := s.V0.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.V1
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V1 != nil {
			tmp := 0
			switch v := s.V1.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.V2
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V2 != nil {
			tmp := 0
			switch v := s.V2.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.V3
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V3 != nil {
			tmp := 0
			switch v := s.V3.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.V4
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V4 != nil {
			tmp := 0
			switch v := s.V4.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.ByteSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Vl
		// type: []variant<int32, fixedpoint<3, 0>, string, *Vector2>
		if len(s.Vl) > 0 {
			for _, e := range s.Vl {
				// list element
				// type: variant<int32, fixedpoint<3, 0>, string, *Vector2>
				if e != nil {
					tmp := 0
					switch v := e.(type) {
					// variant type: int32
					case int32:
						// type: int32
						tmp += 1 + tygo.SizeVarint(uint64(v))
					// variant type: fixedpoint<3, 0>
					case float64:
						// type: fixedpoint<3, 0>
						tmp += 1 + tygo.SizeVarint(uint64((v - 0) * 1000))
					// variant type: string
					case string:
						// type: string
						{
							l := len([]byte(v))
							tmp += 1 + tygo.SizeVarint(uint64(l)) + l
						}
					// variant type: *Vector2
					case *Vector2:
						// type: *Vector2
						{
							tmpp := v.ByteSize()
							tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
						}
					// addition type: int
					case int:
						tmp += 1 + tygo.SizeVarint(uint64(v))
					default:
						panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, fixedpoint<3, 0>, string, *Vector2>: %v", v))
					}
					size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
				} else {
					size += 2 + 1
				}
			}
		}

		// property: s.Vd
		// type: map[int32]variant<Corpus, float64, string, *Vector2>
		if len(s.Vd) > 0 {
			for k, v := range s.Vd {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: variant<Corpus, float64, string, *Vector2>
				if v != nil {
					tmpp := 0
					switch v := v.(type) {
					// variant type: Corpus
					case Corpus:
						// type: Corpus
						tmpp += 1 + tygo.SizeVarint(uint64(v))
					// variant type: float64
					case float64:
						// type: float64
						tmpp += 1 + 8
					// variant type: string
					case string:
						// type: string
						{
							l := len([]byte(v))
							tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
						}
					// variant type: *Vector2
					case *Vector2:
						// type: *Vector2
						{
							tmppp := v.ByteSize()
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
					// addition type: int -> float64
					case int:
						tmpp += 9
					default:
						panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
					}
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Ld
		// type: map[int32][]variant<Corpus, float64, string, *Vector2>
		if len(s.Ld) > 0 {
			for k, v := range s.Ld {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: []variant<Corpus, float64, string, *Vector2>
				if len(v) > 0 {
					for _, e := range v {
						// list element
						// type: variant<Corpus, float64, string, *Vector2>
						if e != nil {
							tmpp := 0
							switch v := e.(type) {
							// variant type: Corpus
							case Corpus:
								// type: Corpus
								tmpp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: float64
							case float64:
								// type: float64
								tmpp += 1 + 8
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// variant type: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									tmppp := v.ByteSize()
									tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
								}
							// addition type: int -> float64
							case int:
								tmpp += 9
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
							}
							tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
						} else {
							tmp += 1 + 1
						}
					}
				}
				size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Fld
		// type: map[int32][]float32
		if len(s.Fld) > 0 {
			for k, v := range s.Fld {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: []float32
				if len(v) > 0 {
					tmpp := len(v) * 4
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Dd
		// type: map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
		if len(s.Dd) > 0 {
			for k, v := range s.Dd {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: map[int32]variant<int32, Corpus, float64, string, *Vector2>
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: variant<int32, Corpus, float64, string, *Vector2>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type: int32
							case int32:
								// type: int32
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: Corpus
							case Corpus:
								// type: Corpus
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: float64
							case float64:
								// type: float64
								tmppp += 1 + 8
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// variant type: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									tmpppp := v.ByteSize()
									tmppp += 1 + tygo.SizeVarint(uint64(tmpppp)) + tmpppp
								}
							// addition type: int
							case int:
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, Corpus, float64, string, *Vector2>: %v", v))
							}
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
				size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Fdd
		// type: map[int32]map[int32]float32
		if len(s.Fdd) > 0 {
			for k, v := range s.Fdd {
				tmp := 0
				// dict key
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value
				// type: map[int32]float32
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: float32
						if v != 0 {
							tmpp += 1 + 4
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
				size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
			}
		}

		// property: s.Nv
		// type: variant<nil, int32>
		if s.Nv != nil {
			tmp := 0
			switch v := s.Nv.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Lv
		// type: variant<int32, []variant<float32, string>>
		if s.Lv != nil {
			tmp := 0
			switch v := s.Lv.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: []variant<float32, string>
			case []interface{}:
				// type: []variant<float32, string>
				if len(v) > 0 {
					for _, e := range v {
						// list element
						// type: variant<float32, string>
						if e != nil {
							tmpp := 0
							switch v := e.(type) {
							// variant type: float32
							case float32:
								// type: float32
								tmpp += 1 + 4
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// addition type: int -> float32
							case int:
								tmpp += 5
							// addition type: float64 -> float32
							case float64:
								tmpp += 5
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
							tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
						} else {
							tmp += 1 + 1
						}
					}
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, []variant<float32, string>>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Flv
		// type: variant<int32, []float32>
		if s.Flv != nil {
			tmp := 0
			switch v := s.Flv.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: []float32
			case []float32:
				// type: []float32
				if len(v) > 0 {
					tmpp := len(v) * 4
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, []float32>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Dv
		// type: variant<int32, map[int32]variant<float32, string>>
		if s.Dv != nil {
			tmp := 0
			switch v := s.Dv.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: map[int32]variant<float32, string>
			case map[int32]interface{}:
				// type: map[int32]variant<float32, string>
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: variant<float32, string>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type: float32
							case float32:
								// type: float32
								tmppp += 1 + 4
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// addition type: int -> float32
							case int:
								tmppp += 5
							// addition type: float64 -> float32
							case float64:
								tmppp += 5
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, map[int32]variant<float32, string>>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

		// property: s.Fdv
		// type: variant<int32, map[int32]float32>
		if s.Fdv != nil {
			tmp := 0
			switch v := s.Fdv.(type) {
			// variant type: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type: map[int32]float32
			case map[int32]float32:
				// type: map[int32]float32
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: float32
						if v != 0 {
							tmpp += 1 + 4
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
			// addition type: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, map[int32]float32>: %v", v))
			}
			size += 2 + tygo.SizeVarint(uint64(tmp)) + tmp
		}

	}
	s.SetCachedSize(size)
	return
}

func (s *Fighter) Serialize(output *tygo.ProtoBuf) {
	if s != nil {
		s.Fighter_Part2.Serialize(output)
		// property: s.V0
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V0 != nil {
			tmp := 0
			switch v := s.V0.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type size: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type size: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type size: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			output.WriteBytes(162, 1) // tag: 162 MAKE_TAG(20, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.V0.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: float32
			case float32:
				// type: float32
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(v))
			// variant type serialize: bytes
			case []byte:
				// type: bytes
				{
					output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
					output.WriteBuf([]byte(v))
				}
			// variant type serialize: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// addition type serialize: float64 -> float32
			case float64:
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(float32(v)))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
		}

		// property: s.V1
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V1 != nil {
			tmp := 0
			switch v := s.V1.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type size: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type size: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type size: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			output.WriteBytes(170, 1) // tag: 170 MAKE_TAG(21, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.V1.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: float32
			case float32:
				// type: float32
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(v))
			// variant type serialize: bytes
			case []byte:
				// type: bytes
				{
					output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
					output.WriteBuf([]byte(v))
				}
			// variant type serialize: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// addition type serialize: float64 -> float32
			case float64:
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(float32(v)))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
		}

		// property: s.V2
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V2 != nil {
			tmp := 0
			switch v := s.V2.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type size: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type size: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type size: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			output.WriteBytes(178, 1) // tag: 178 MAKE_TAG(22, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.V2.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: float32
			case float32:
				// type: float32
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(v))
			// variant type serialize: bytes
			case []byte:
				// type: bytes
				{
					output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
					output.WriteBuf([]byte(v))
				}
			// variant type serialize: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// addition type serialize: float64 -> float32
			case float64:
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(float32(v)))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
		}

		// property: s.V3
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V3 != nil {
			tmp := 0
			switch v := s.V3.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type size: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type size: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type size: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			output.WriteBytes(186, 1) // tag: 186 MAKE_TAG(23, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.V3.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: float32
			case float32:
				// type: float32
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(v))
			// variant type serialize: bytes
			case []byte:
				// type: bytes
				{
					output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
					output.WriteBuf([]byte(v))
				}
			// variant type serialize: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// addition type serialize: float64 -> float32
			case float64:
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(float32(v)))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
		}

		// property: s.V4
		// type: variant<int32, float32, bytes, *Vector2>
		if s.V4 != nil {
			tmp := 0
			switch v := s.V4.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: float32
			case float32:
				// type: float32
				tmp += 1 + 4
			// variant type size: bytes
			case []byte:
				// type: bytes
				{
					l := len([]byte(v))
					tmp += 1 + tygo.SizeVarint(uint64(l)) + l
				}
			// variant type size: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					tmpp := v.CachedSize()
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type size: float64 -> float32
			case float64:
				tmp += 5
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
			output.WriteBytes(194, 1) // tag: 194 MAKE_TAG(24, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.V4.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: float32
			case float32:
				// type: float32
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(v))
			// variant type serialize: bytes
			case []byte:
				// type: bytes
				{
					output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
					output.WriteBuf([]byte(v))
				}
			// variant type serialize: *Vector2
			case *Vector2:
				// type: *Vector2
				{
					output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
					output.WriteVarint(uint64(v.CachedSize()))
					v.Serialize(output)
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// addition type serialize: float64 -> float32
			case float64:
				output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
				output.WriteFixed32(math.Float32bits(float32(v)))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, float32, bytes, *Vector2>: %v", v))
			}
		}

		// property: s.Vl
		// type: []variant<int32, fixedpoint<3, 0>, string, *Vector2>
		if len(s.Vl) > 0 {
			for _, e := range s.Vl {
				// list element
				output.WriteBytes(202, 1) // tag: 202 MAKE_TAG(25, WireBytes=2)
				// type: variant<int32, fixedpoint<3, 0>, string, *Vector2>
				if e != nil {
					tmp := 0
					switch v := e.(type) {
					// variant type size: int32
					case int32:
						// type: int32
						tmp += 1 + tygo.SizeVarint(uint64(v))
					// variant type size: fixedpoint<3, 0>
					case float64:
						// type: fixedpoint<3, 0>
						tmp += 1 + tygo.SizeVarint(uint64((v - 0) * 1000))
					// variant type size: string
					case string:
						// type: string
						{
							l := len([]byte(v))
							tmp += 1 + tygo.SizeVarint(uint64(l)) + l
						}
					// variant type size: *Vector2
					case *Vector2:
						// type: *Vector2
						{
							tmpp := v.CachedSize()
							tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
						}
					// addition type size: int
					case int:
						tmp += 1 + tygo.SizeVarint(uint64(v))
					default:
						panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, fixedpoint<3, 0>, string, *Vector2>: %v", v))
					}
					output.WriteVarint(uint64(tmp))
					switch v := e.(type) {
					// variant type serialize: int32
					case int32:
						// type: int32
						output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
						output.WriteVarint(uint64(v))
					// variant type serialize: fixedpoint<3, 0>
					case float64:
						// type: fixedpoint<3, 0>
						output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
						output.WriteVarint(uint64((v - 0) * 1000))
					// variant type serialize: string
					case string:
						// type: string
						{
							output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
							output.WriteBuf([]byte(v))
						}
					// variant type serialize: *Vector2
					case *Vector2:
						// type: *Vector2
						{
							output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
							output.WriteVarint(uint64(v.CachedSize()))
							v.Serialize(output)
						}
					// addition type serialize: int
					case int:
						output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
						output.WriteVarint(uint64(v))
					default:
						panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, fixedpoint<3, 0>, string, *Vector2>: %v", v))
					}
				} else {
					output.WriteBytes(0)
				}
			}
		}

		// property: s.Vd
		// type: map[int32]variant<Corpus, float64, string, *Vector2>
		if len(s.Vd) > 0 {
			for k, v := range s.Vd {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: variant<Corpus, float64, string, *Vector2>
				if v != nil {
					tmpp := 0
					switch v := v.(type) {
					// variant type: Corpus
					case Corpus:
						// type: Corpus
						tmpp += 1 + tygo.SizeVarint(uint64(v))
					// variant type: float64
					case float64:
						// type: float64
						tmpp += 1 + 8
					// variant type: string
					case string:
						// type: string
						{
							l := len([]byte(v))
							tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
						}
					// variant type: *Vector2
					case *Vector2:
						// type: *Vector2
						{
							tmppp := v.CachedSize()
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
					// addition type: int -> float64
					case int:
						tmpp += 9
					default:
						panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
					}
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				output.WriteBytes(210, 1) // tag: 210 MAKE_TAG(26, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: variant<Corpus, float64, string, *Vector2>
				if v != nil {
					tmpp := 0
					switch v := v.(type) {
					// variant type size: Corpus
					case Corpus:
						// type: Corpus
						tmpp += 1 + tygo.SizeVarint(uint64(v))
					// variant type size: float64
					case float64:
						// type: float64
						tmpp += 1 + 8
					// variant type size: string
					case string:
						// type: string
						{
							l := len([]byte(v))
							tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
						}
					// variant type size: *Vector2
					case *Vector2:
						// type: *Vector2
						{
							tmppp := v.CachedSize()
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
					// addition type size: int -> float64
					case int:
						tmpp += 9
					default:
						panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
					}
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteVarint(uint64(tmpp))
					switch v := v.(type) {
					// variant type serialize: Corpus
					case Corpus:
						// type: Corpus
						output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
						output.WriteVarint(uint64(v))
					// variant type serialize: float64
					case float64:
						// type: float64
						output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
						output.WriteFixed64(math.Float64bits(v))
					// variant type serialize: string
					case string:
						// type: string
						{
							output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
							output.WriteBuf([]byte(v))
						}
					// variant type serialize: *Vector2
					case *Vector2:
						// type: *Vector2
						{
							output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
							output.WriteVarint(uint64(v.CachedSize()))
							v.Serialize(output)
						}
					// addition type serialize: int -> float64
					case int:
						output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
						output.WriteFixed64(math.Float64bits(float64(v)))
					default:
						panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
					}
				}
			}
		}

		// property: s.Ld
		// type: map[int32][]variant<Corpus, float64, string, *Vector2>
		if len(s.Ld) > 0 {
			for k, v := range s.Ld {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: []variant<Corpus, float64, string, *Vector2>
				if len(v) > 0 {
					for _, e := range v {
						// list element
						// type: variant<Corpus, float64, string, *Vector2>
						if e != nil {
							tmpp := 0
							switch v := e.(type) {
							// variant type: Corpus
							case Corpus:
								// type: Corpus
								tmpp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: float64
							case float64:
								// type: float64
								tmpp += 1 + 8
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// variant type: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									tmppp := v.CachedSize()
									tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
								}
							// addition type: int -> float64
							case int:
								tmpp += 9
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
							}
							tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
						} else {
							tmp += 1 + 1
						}
					}
				}
				output.WriteBytes(218, 1) // tag: 218 MAKE_TAG(27, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: []variant<Corpus, float64, string, *Vector2>
				if len(v) > 0 {
					for _, e := range v {
						// list element
						output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
						// type: variant<Corpus, float64, string, *Vector2>
						if e != nil {
							tmpp := 0
							switch v := e.(type) {
							// variant type size: Corpus
							case Corpus:
								// type: Corpus
								tmpp += 1 + tygo.SizeVarint(uint64(v))
							// variant type size: float64
							case float64:
								// type: float64
								tmpp += 1 + 8
							// variant type size: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// variant type size: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									tmppp := v.CachedSize()
									tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
								}
							// addition type size: int -> float64
							case int:
								tmpp += 9
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
							}
							output.WriteVarint(uint64(tmpp))
							switch v := e.(type) {
							// variant type serialize: Corpus
							case Corpus:
								// type: Corpus
								output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
								output.WriteVarint(uint64(v))
							// variant type serialize: float64
							case float64:
								// type: float64
								output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
								output.WriteFixed64(math.Float64bits(v))
							// variant type serialize: string
							case string:
								// type: string
								{
									output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
									output.WriteBuf([]byte(v))
								}
							// variant type serialize: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
									output.WriteVarint(uint64(v.CachedSize()))
									v.Serialize(output)
								}
							// addition type serialize: int -> float64
							case int:
								output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
								output.WriteFixed64(math.Float64bits(float64(v)))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
							}
						} else {
							output.WriteBytes(0)
						}
					}
				}
			}
		}

		// property: s.Fld
		// type: map[int32][]float32
		if len(s.Fld) > 0 {
			for k, v := range s.Fld {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: []float32
				if len(v) > 0 {
					tmpp := len(v) * 4
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
				output.WriteBytes(226, 1) // tag: 226 MAKE_TAG(28, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: []float32
				if len(v) > 0 {
					tmpp := len(v) * 4
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteVarint(uint64(tmpp))
					for _, e := range v {
						// list element serialize
						// type: float32
						output.WriteFixed32(math.Float32bits(e))
					}
				}
			}
		}

		// property: s.Dd
		// type: map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
		if len(s.Dd) > 0 {
			for k, v := range s.Dd {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: map[int32]variant<int32, Corpus, float64, string, *Vector2>
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: variant<int32, Corpus, float64, string, *Vector2>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type: int32
							case int32:
								// type: int32
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: Corpus
							case Corpus:
								// type: Corpus
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: float64
							case float64:
								// type: float64
								tmppp += 1 + 8
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// variant type: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									tmpppp := v.CachedSize()
									tmppp += 1 + tygo.SizeVarint(uint64(tmpppp)) + tmpppp
								}
							// addition type: int
							case int:
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, Corpus, float64, string, *Vector2>: %v", v))
							}
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
				output.WriteBytes(234, 1) // tag: 234 MAKE_TAG(29, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: map[int32]variant<int32, Corpus, float64, string, *Vector2>
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key size
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value size
						// type: variant<int32, Corpus, float64, string, *Vector2>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type: int32
							case int32:
								// type: int32
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: Corpus
							case Corpus:
								// type: Corpus
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type: float64
							case float64:
								// type: float64
								tmppp += 1 + 8
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// variant type: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									tmpppp := v.CachedSize()
									tmppp += 1 + tygo.SizeVarint(uint64(tmpppp)) + tmpppp
								}
							// addition type: int
							case int:
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, Corpus, float64, string, *Vector2>: %v", v))
							}
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
						output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
						output.WriteVarint(uint64(tmpp))
						// dict key serialize
						// type: int32
						if k != 0 {
							output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
							output.WriteVarint(uint64(k))
						}
						// dict value serialize
						// type: variant<int32, Corpus, float64, string, *Vector2>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type size: int32
							case int32:
								// type: int32
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type size: Corpus
							case Corpus:
								// type: Corpus
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							// variant type size: float64
							case float64:
								// type: float64
								tmppp += 1 + 8
							// variant type size: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// variant type size: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									tmpppp := v.CachedSize()
									tmppp += 1 + tygo.SizeVarint(uint64(tmpppp)) + tmpppp
								}
							// addition type size: int
							case int:
								tmppp += 1 + tygo.SizeVarint(uint64(v))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, Corpus, float64, string, *Vector2>: %v", v))
							}
							output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
							output.WriteVarint(uint64(tmppp))
							switch v := v.(type) {
							// variant type serialize: int32
							case int32:
								// type: int32
								output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
								output.WriteVarint(uint64(v))
							// variant type serialize: Corpus
							case Corpus:
								// type: Corpus
								output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
								output.WriteVarint(uint64(v))
							// variant type serialize: float64
							case float64:
								// type: float64
								output.WriteBytes(25) // tag: 25 MAKE_TAG(3, WireFixed64=1)
								output.WriteFixed64(math.Float64bits(v))
							// variant type serialize: string
							case string:
								// type: string
								{
									output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
									output.WriteBuf([]byte(v))
								}
							// variant type serialize: *Vector2
							case *Vector2:
								// type: *Vector2
								{
									output.WriteBytes(42) // tag: 42 MAKE_TAG(5, WireBytes=2)
									output.WriteVarint(uint64(v.CachedSize()))
									v.Serialize(output)
								}
							// addition type serialize: int
							case int:
								output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
								output.WriteVarint(uint64(v))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, Corpus, float64, string, *Vector2>: %v", v))
							}
						}
					}
				}
			}
		}

		// property: s.Fdd
		// type: map[int32]map[int32]float32
		if len(s.Fdd) > 0 {
			for k, v := range s.Fdd {
				tmp := 0
				// dict key size
				// type: int32
				if k != 0 {
					tmp += 1 + tygo.SizeVarint(uint64(k))
				}
				// dict value size
				// type: map[int32]float32
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: float32
						if v != 0 {
							tmpp += 1 + 4
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
				output.WriteBytes(242, 1) // tag: 242 MAKE_TAG(30, WireBytes=2)
				output.WriteVarint(uint64(tmp))
				// dict key serialize
				// type: int32
				if k != 0 {
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(k))
				}
				// dict value serialize
				// type: map[int32]float32
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key size
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value size
						// type: float32
						if v != 0 {
							tmpp += 1 + 4
						}
						output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
						output.WriteVarint(uint64(tmpp))
						// dict key serialize
						// type: int32
						if k != 0 {
							output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
							output.WriteVarint(uint64(k))
						}
						// dict value serialize
						// type: float32
						if v != 0 {
							output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
							output.WriteFixed32(math.Float32bits(v))
						}
					}
				}
			}
		}

		// property: s.Nv
		// type: variant<nil, int32>
		if s.Nv != nil {
			tmp := 0
			switch v := s.Nv.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
			}
			output.WriteBytes(250, 1) // tag: 250 MAKE_TAG(31, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.Nv.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
				output.WriteVarint(uint64(v))
			// addition type serialize: int
			case int:
				output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
				output.WriteVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
			}
		}

		// property: s.Lv
		// type: variant<int32, []variant<float32, string>>
		if s.Lv != nil {
			tmp := 0
			switch v := s.Lv.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: []variant<float32, string>
			case []interface{}:
				// type: []variant<float32, string>
				if len(v) > 0 {
					for _, e := range v {
						// list element
						// type: variant<float32, string>
						if e != nil {
							tmpp := 0
							switch v := e.(type) {
							// variant type: float32
							case float32:
								// type: float32
								tmpp += 1 + 4
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// addition type: int -> float32
							case int:
								tmpp += 5
							// addition type: float64 -> float32
							case float64:
								tmpp += 5
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
							tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
						} else {
							tmp += 1 + 1
						}
					}
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, []variant<float32, string>>: %v", v))
			}
			output.WriteBytes(130, 2) // tag: 258 MAKE_TAG(32, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.Lv.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: []variant<float32, string>
			case []interface{}:
				// type: []variant<float32, string>
				if len(v) > 0 {
					for _, e := range v {
						// list element
						output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
						// type: variant<float32, string>
						if e != nil {
							tmpp := 0
							switch v := e.(type) {
							// variant type size: float32
							case float32:
								// type: float32
								tmpp += 1 + 4
							// variant type size: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// addition type size: int -> float32
							case int:
								tmpp += 5
							// addition type size: float64 -> float32
							case float64:
								tmpp += 5
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
							output.WriteVarint(uint64(tmpp))
							switch v := e.(type) {
							// variant type serialize: float32
							case float32:
								// type: float32
								output.WriteBytes(13) // tag: 13 MAKE_TAG(1, WireFixed32=5)
								output.WriteFixed32(math.Float32bits(v))
							// variant type serialize: string
							case string:
								// type: string
								{
									output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
									output.WriteBuf([]byte(v))
								}
							// addition type serialize: int -> float32
							case int:
								output.WriteBytes(13) // tag: 13 MAKE_TAG(1, WireFixed32=5)
								output.WriteFixed32(math.Float32bits(float32(v)))
							// addition type serialize: float64 -> float32
							case float64:
								output.WriteBytes(13) // tag: 13 MAKE_TAG(1, WireFixed32=5)
								output.WriteFixed32(math.Float32bits(float32(v)))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
						} else {
							output.WriteBytes(0)
						}
					}
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, []variant<float32, string>>: %v", v))
			}
		}

		// property: s.Flv
		// type: variant<int32, []float32>
		if s.Flv != nil {
			tmp := 0
			switch v := s.Flv.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: []float32
			case []float32:
				// type: []float32
				if len(v) > 0 {
					tmpp := len(v) * 4
					tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, []float32>: %v", v))
			}
			output.WriteBytes(138, 2) // tag: 266 MAKE_TAG(33, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.Flv.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: []float32
			case []float32:
				// type: []float32
				if len(v) > 0 {
					tmpp := len(v) * 4
					output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
					output.WriteVarint(uint64(tmpp))
					for _, e := range v {
						// list element serialize
						// type: float32
						output.WriteFixed32(math.Float32bits(e))
					}
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, []float32>: %v", v))
			}
		}

		// property: s.Dv
		// type: variant<int32, map[int32]variant<float32, string>>
		if s.Dv != nil {
			tmp := 0
			switch v := s.Dv.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: map[int32]variant<float32, string>
			case map[int32]interface{}:
				// type: map[int32]variant<float32, string>
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: variant<float32, string>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type: float32
							case float32:
								// type: float32
								tmppp += 1 + 4
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// addition type: int -> float32
							case int:
								tmppp += 5
							// addition type: float64 -> float32
							case float64:
								tmppp += 5
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, map[int32]variant<float32, string>>: %v", v))
			}
			output.WriteBytes(146, 2) // tag: 274 MAKE_TAG(34, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.Dv.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: map[int32]variant<float32, string>
			case map[int32]interface{}:
				// type: map[int32]variant<float32, string>
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key size
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value size
						// type: variant<float32, string>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type: float32
							case float32:
								// type: float32
								tmppp += 1 + 4
							// variant type: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// addition type: int -> float32
							case int:
								tmppp += 5
							// addition type: float64 -> float32
							case float64:
								tmppp += 5
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
							tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
						}
						output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
						output.WriteVarint(uint64(tmpp))
						// dict key serialize
						// type: int32
						if k != 0 {
							output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
							output.WriteVarint(uint64(k))
						}
						// dict value serialize
						// type: variant<float32, string>
						if v != nil {
							tmppp := 0
							switch v := v.(type) {
							// variant type size: float32
							case float32:
								// type: float32
								tmppp += 1 + 4
							// variant type size: string
							case string:
								// type: string
								{
									l := len([]byte(v))
									tmppp += 1 + tygo.SizeVarint(uint64(l)) + l
								}
							// addition type size: int -> float32
							case int:
								tmppp += 5
							// addition type size: float64 -> float32
							case float64:
								tmppp += 5
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
							output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
							output.WriteVarint(uint64(tmppp))
							switch v := v.(type) {
							// variant type serialize: float32
							case float32:
								// type: float32
								output.WriteBytes(13) // tag: 13 MAKE_TAG(1, WireFixed32=5)
								output.WriteFixed32(math.Float32bits(v))
							// variant type serialize: string
							case string:
								// type: string
								{
									output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
									output.WriteBuf([]byte(v))
								}
							// addition type serialize: int -> float32
							case int:
								output.WriteBytes(13) // tag: 13 MAKE_TAG(1, WireFixed32=5)
								output.WriteFixed32(math.Float32bits(float32(v)))
							// addition type serialize: float64 -> float32
							case float64:
								output.WriteBytes(13) // tag: 13 MAKE_TAG(1, WireFixed32=5)
								output.WriteFixed32(math.Float32bits(float32(v)))
							default:
								panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<float32, string>: %v", v))
							}
						}
					}
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, map[int32]variant<float32, string>>: %v", v))
			}
		}

		// property: s.Fdv
		// type: variant<int32, map[int32]float32>
		if s.Fdv != nil {
			tmp := 0
			switch v := s.Fdv.(type) {
			// variant type size: int32
			case int32:
				// type: int32
				tmp += 1 + tygo.SizeVarint(uint64(v))
			// variant type size: map[int32]float32
			case map[int32]float32:
				// type: map[int32]float32
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value
						// type: float32
						if v != 0 {
							tmpp += 1 + 4
						}
						tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
					}
				}
			// addition type size: int
			case int:
				tmp += 1 + tygo.SizeVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, map[int32]float32>: %v", v))
			}
			output.WriteBytes(154, 2) // tag: 282 MAKE_TAG(35, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			switch v := s.Fdv.(type) {
			// variant type serialize: int32
			case int32:
				// type: int32
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			// variant type serialize: map[int32]float32
			case map[int32]float32:
				// type: map[int32]float32
				if len(v) > 0 {
					for k, v := range v {
						tmpp := 0
						// dict key size
						// type: int32
						if k != 0 {
							tmpp += 1 + tygo.SizeVarint(uint64(k))
						}
						// dict value size
						// type: float32
						if v != 0 {
							tmpp += 1 + 4
						}
						output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
						output.WriteVarint(uint64(tmpp))
						// dict key serialize
						// type: int32
						if k != 0 {
							output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
							output.WriteVarint(uint64(k))
						}
						// dict value serialize
						// type: float32
						if v != 0 {
							output.WriteBytes(21) // tag: 21 MAKE_TAG(2, WireFixed32=5)
							output.WriteFixed32(math.Float32bits(v))
						}
					}
				}
			// addition type serialize: int
			case int:
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(v))
			default:
				panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<int32, map[int32]float32>: %v", v))
			}
		}

	}
}

func (s *Fighter) Deserialize(input *tygo.ProtoBuf) (err error) {
	if err = s.Fighter_Part2.Deserialize(input); err == nil {
		input.Reset()
	} else {
		return
	}
	object_tmp_66: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(1023); err != nil {
			return
		}
		switch (tag >> 3) - 19 {
		// property: s.V0
		case 1:
			if tag == 162 { // MAKE_TAG(20, WireBytes=2)
				// type: variant<int32, float32, bytes, *Vector2>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_67: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.V0 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_67 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 2:
						if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
							// type: float32
							if x, e := tmpi.ReadFixed32(); e == nil {
								s.V0 = math.Float32frombits(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_67 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 3:
						if tmpg == 26 { // MAKE_TAG(3, WireBytes=2)
							// type: bytes
							if x, e := tmpi.ReadBuf(); e == nil {
								s.V0 = make([]byte, len(x))
								copy(s.V0.([]byte), x)
							} else {
								err = e
								return
							}
							continue variant_tmp_67 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 4:
						if tmpg == 34 { // MAKE_TAG(4, WireBytes=2)
							// type: *Vector2
							if x, e := tmpi.ReadBuf(); e == nil {
								if s.V0 == nil {
									s.V0 = &Vector2{}
								}
								if len(x) > 0 {
									if err = s.V0.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							continue variant_tmp_67 // next tag for variant<int32, float32, bytes, *Vector2>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(170, 1) { // tag: 170 MAKE_TAG(21, WireBytes=2)
					goto object_tmp_69 // goto case 2
				}
			}
		// property: s.V1
		case 2:
			if tag == 170 { // MAKE_TAG(21, WireBytes=2)
			object_tmp_69:
				// type: variant<int32, float32, bytes, *Vector2>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_68: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.V1 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_68 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 2:
						if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
							// type: float32
							if x, e := tmpi.ReadFixed32(); e == nil {
								s.V1 = math.Float32frombits(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_68 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 3:
						if tmpg == 26 { // MAKE_TAG(3, WireBytes=2)
							// type: bytes
							if x, e := tmpi.ReadBuf(); e == nil {
								s.V1 = make([]byte, len(x))
								copy(s.V1.([]byte), x)
							} else {
								err = e
								return
							}
							continue variant_tmp_68 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 4:
						if tmpg == 34 { // MAKE_TAG(4, WireBytes=2)
							// type: *Vector2
							if x, e := tmpi.ReadBuf(); e == nil {
								if s.V1 == nil {
									s.V1 = &Vector2{}
								}
								if len(x) > 0 {
									if err = s.V1.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							continue variant_tmp_68 // next tag for variant<int32, float32, bytes, *Vector2>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(178, 1) { // tag: 178 MAKE_TAG(22, WireBytes=2)
					goto object_tmp_71 // goto case 3
				}
			}
		// property: s.V2
		case 3:
			if tag == 178 { // MAKE_TAG(22, WireBytes=2)
			object_tmp_71:
				// type: variant<int32, float32, bytes, *Vector2>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_70: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.V2 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_70 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 2:
						if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
							// type: float32
							if x, e := tmpi.ReadFixed32(); e == nil {
								s.V2 = math.Float32frombits(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_70 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 3:
						if tmpg == 26 { // MAKE_TAG(3, WireBytes=2)
							// type: bytes
							if x, e := tmpi.ReadBuf(); e == nil {
								s.V2 = make([]byte, len(x))
								copy(s.V2.([]byte), x)
							} else {
								err = e
								return
							}
							continue variant_tmp_70 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 4:
						if tmpg == 34 { // MAKE_TAG(4, WireBytes=2)
							// type: *Vector2
							if x, e := tmpi.ReadBuf(); e == nil {
								if s.V2 == nil {
									s.V2 = &Vector2{}
								}
								if len(x) > 0 {
									if err = s.V2.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							continue variant_tmp_70 // next tag for variant<int32, float32, bytes, *Vector2>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(186, 1) { // tag: 186 MAKE_TAG(23, WireBytes=2)
					goto object_tmp_73 // goto case 4
				}
			}
		// property: s.V3
		case 4:
			if tag == 186 { // MAKE_TAG(23, WireBytes=2)
			object_tmp_73:
				// type: variant<int32, float32, bytes, *Vector2>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_72: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.V3 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_72 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 2:
						if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
							// type: float32
							if x, e := tmpi.ReadFixed32(); e == nil {
								s.V3 = math.Float32frombits(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_72 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 3:
						if tmpg == 26 { // MAKE_TAG(3, WireBytes=2)
							// type: bytes
							if x, e := tmpi.ReadBuf(); e == nil {
								s.V3 = make([]byte, len(x))
								copy(s.V3.([]byte), x)
							} else {
								err = e
								return
							}
							continue variant_tmp_72 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 4:
						if tmpg == 34 { // MAKE_TAG(4, WireBytes=2)
							// type: *Vector2
							if x, e := tmpi.ReadBuf(); e == nil {
								if s.V3 == nil {
									s.V3 = &Vector2{}
								}
								if len(x) > 0 {
									if err = s.V3.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							continue variant_tmp_72 // next tag for variant<int32, float32, bytes, *Vector2>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(194, 1) { // tag: 194 MAKE_TAG(24, WireBytes=2)
					goto object_tmp_75 // goto case 5
				}
			}
		// property: s.V4
		case 5:
			if tag == 194 { // MAKE_TAG(24, WireBytes=2)
			object_tmp_75:
				// type: variant<int32, float32, bytes, *Vector2>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_74: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.V4 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_74 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 2:
						if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
							// type: float32
							if x, e := tmpi.ReadFixed32(); e == nil {
								s.V4 = math.Float32frombits(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_74 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 3:
						if tmpg == 26 { // MAKE_TAG(3, WireBytes=2)
							// type: bytes
							if x, e := tmpi.ReadBuf(); e == nil {
								s.V4 = make([]byte, len(x))
								copy(s.V4.([]byte), x)
							} else {
								err = e
								return
							}
							continue variant_tmp_74 // next tag for variant<int32, float32, bytes, *Vector2>
						}
					case 4:
						if tmpg == 34 { // MAKE_TAG(4, WireBytes=2)
							// type: *Vector2
							if x, e := tmpi.ReadBuf(); e == nil {
								if s.V4 == nil {
									s.V4 = &Vector2{}
								}
								if len(x) > 0 {
									if err = s.V4.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
										return
									}
								}
							} else {
								err = e
								return
							}
							continue variant_tmp_74 // next tag for variant<int32, float32, bytes, *Vector2>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(202, 1) { // tag: 202 MAKE_TAG(25, WireBytes=2)
					goto object_tmp_78 // goto case 6
				}
			}
		// property: s.Vl
		case 6:
			if tag == 202 { // MAKE_TAG(25, WireBytes=2)
			object_tmp_78:
				// type: []variant<int32, fixedpoint<3, 0>, string, *Vector2>
				loop_tmp_76: for {
					var tmp_76 interface{}
					// type: variant<int32, fixedpoint<3, 0>, string, *Vector2>
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						variant_tmp_77: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
						case 1:
							if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
								// type: int32
								if x, e := tmpi.ReadVarint(); e == nil {
									tmp_76 = int32(x)
								} else {
									err = e
									return
								}
								continue variant_tmp_77 // next tag for variant<int32, fixedpoint<3, 0>, string, *Vector2>
							}
						case 2:
							if tmpg == 16 { // MAKE_TAG(2, WireVarint=0)
								// type: fixedpoint<3, 0>
								if x, e := tmpi.ReadVarint(); e == nil {
									tmp_76 = float64(x) / 1000 + 0
								} else {
									err = e
									return
								}
								continue variant_tmp_77 // next tag for variant<int32, fixedpoint<3, 0>, string, *Vector2>
							}
						case 3:
							if tmpg == 26 { // MAKE_TAG(3, WireBytes=2)
								// type: string
								if x, e := tmpi.ReadBuf(); e == nil {
									tmp_76 = string(x)
								} else {
									err = e
									return
								}
								continue variant_tmp_77 // next tag for variant<int32, fixedpoint<3, 0>, string, *Vector2>
							}
						case 4:
							if tmpg == 34 { // MAKE_TAG(4, WireBytes=2)
								// type: *Vector2
								if x, e := tmpi.ReadBuf(); e == nil {
									if tmp_76 == nil {
										tmp_76 = &Vector2{}
									}
									if len(x) > 0 {
										if err = tmp_76.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
											return
										}
									}
								} else {
									err = e
									return
								}
								continue variant_tmp_77 // next tag for variant<int32, fixedpoint<3, 0>, string, *Vector2>
							}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
					} else {
						err = e
						return
					}
					s.Vl = append(s.Vl, tmp_76)
					if !input.ExpectBytes(202, 1) { // tag: 202 MAKE_TAG(25, WireBytes=2)
						break loop_tmp_76 // end for []variant<int32, fixedpoint<3, 0>, string, *Vector2>
					}
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(210, 1) { // tag: 210 MAKE_TAG(26, WireBytes=2)
					goto object_tmp_82 // goto case 7
				}
			}
		// property: s.Vd
		case 7:
			if tag == 210 { // MAKE_TAG(26, WireBytes=2)
			object_tmp_82:
				// type: map[int32]variant<Corpus, float64, string, *Vector2>
				loop_tmp_79: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_79 int32
						var tmp_80 interface{}
						dict_tmp_79: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_79 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_80 // goto case 2
									}
									continue dict_tmp_79 // next tag for map[int32]variant<Corpus, float64, string, *Vector2>
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_80:
									// type: variant<Corpus, float64, string, *Vector2>
									if x, e := tmpi.ReadBuf(); e == nil {
										tmpii := &tygo.ProtoBuf{Buffer: x}
										variant_tmp_81: for !tmpii.ExpectEnd() {
											var tmpig int
											if tmpig, err = tmpii.ReadTag(127); err != nil {
												return
											}
											switch tmpig >> 3 {
										case 1:
											if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
												// type: Corpus
												if x, e := tmpii.ReadVarint(); e == nil {
													tmp_80 = Corpus(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_81 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 2:
											if tmpig == 17 { // MAKE_TAG(2, WireFixed64=1)
												// type: float64
												if x, e := tmpii.ReadFixed64(); e == nil {
													tmp_80 = math.Float64frombits(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_81 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 3:
											if tmpig == 26 { // MAKE_TAG(3, WireBytes=2)
												// type: string
												if x, e := tmpii.ReadBuf(); e == nil {
													tmp_80 = string(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_81 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 4:
											if tmpig == 34 { // MAKE_TAG(4, WireBytes=2)
												// type: *Vector2
												if x, e := tmpii.ReadBuf(); e == nil {
													if tmp_80 == nil {
														tmp_80 = &Vector2{}
													}
													if len(x) > 0 {
														if err = tmp_80.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
															return
														}
													}
												} else {
													err = e
													return
												}
												continue variant_tmp_81 // next tag for variant<Corpus, float64, string, *Vector2>
											}
											}
											if err = tmpii.SkipField(tmpig); err != nil {
												return
											}
										}
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_79 // end for map[int32]variant<Corpus, float64, string, *Vector2>
									}
									continue dict_tmp_79 // next tag for map[int32]variant<Corpus, float64, string, *Vector2>
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Vd[tmp_79] = tmp_80
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(210, 1) { // tag: 210 MAKE_TAG(26, WireBytes=2)
						break loop_tmp_79 // end for map[int32]variant<Corpus, float64, string, *Vector2>
					}
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(218, 1) { // tag: 218 MAKE_TAG(27, WireBytes=2)
					goto object_tmp_87 // goto case 8
				}
			}
		// property: s.Ld
		case 8:
			if tag == 218 { // MAKE_TAG(27, WireBytes=2)
			object_tmp_87:
				// type: map[int32][]variant<Corpus, float64, string, *Vector2>
				loop_tmp_83: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_83 int32
						var tmp_84 []interface{}
						dict_tmp_83: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_83 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_84 // goto case 2
									}
									continue dict_tmp_83 // next tag for map[int32][]variant<Corpus, float64, string, *Vector2>
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_84:
									// type: []variant<Corpus, float64, string, *Vector2>
									loop_tmp_85: for {
										var tmp_85 interface{}
										// type: variant<Corpus, float64, string, *Vector2>
										if x, e := tmpi.ReadBuf(); e == nil {
											tmpii := &tygo.ProtoBuf{Buffer: x}
											variant_tmp_86: for !tmpii.ExpectEnd() {
												var tmpig int
												if tmpig, err = tmpii.ReadTag(127); err != nil {
													return
												}
												switch tmpig >> 3 {
											case 1:
												if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
													// type: Corpus
													if x, e := tmpii.ReadVarint(); e == nil {
														tmp_85 = Corpus(x)
													} else {
														err = e
														return
													}
													continue variant_tmp_86 // next tag for variant<Corpus, float64, string, *Vector2>
												}
											case 2:
												if tmpig == 17 { // MAKE_TAG(2, WireFixed64=1)
													// type: float64
													if x, e := tmpii.ReadFixed64(); e == nil {
														tmp_85 = math.Float64frombits(x)
													} else {
														err = e
														return
													}
													continue variant_tmp_86 // next tag for variant<Corpus, float64, string, *Vector2>
												}
											case 3:
												if tmpig == 26 { // MAKE_TAG(3, WireBytes=2)
													// type: string
													if x, e := tmpii.ReadBuf(); e == nil {
														tmp_85 = string(x)
													} else {
														err = e
														return
													}
													continue variant_tmp_86 // next tag for variant<Corpus, float64, string, *Vector2>
												}
											case 4:
												if tmpig == 34 { // MAKE_TAG(4, WireBytes=2)
													// type: *Vector2
													if x, e := tmpii.ReadBuf(); e == nil {
														if tmp_85 == nil {
															tmp_85 = &Vector2{}
														}
														if len(x) > 0 {
															if err = tmp_85.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
																return
															}
														}
													} else {
														err = e
														return
													}
													continue variant_tmp_86 // next tag for variant<Corpus, float64, string, *Vector2>
												}
												}
												if err = tmpii.SkipField(tmpig); err != nil {
													return
												}
											}
										} else {
											err = e
											return
										}
										tmp_84 = append(tmp_84, tmp_85)
										if !tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
											break loop_tmp_85 // end for []variant<Corpus, float64, string, *Vector2>
										}
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_83 // end for map[int32][]variant<Corpus, float64, string, *Vector2>
									}
									continue dict_tmp_83 // next tag for map[int32][]variant<Corpus, float64, string, *Vector2>
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Ld[tmp_83] = tmp_84
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(218, 1) { // tag: 218 MAKE_TAG(27, WireBytes=2)
						break loop_tmp_83 // end for map[int32][]variant<Corpus, float64, string, *Vector2>
					}
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(226, 1) { // tag: 226 MAKE_TAG(28, WireBytes=2)
					goto object_tmp_91 // goto case 9
				}
			}
		// property: s.Fld
		case 9:
			if tag == 226 { // MAKE_TAG(28, WireBytes=2)
			object_tmp_91:
				// type: map[int32][]float32
				loop_tmp_88: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_88 int32
						var tmp_89 []float32
						dict_tmp_88: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_88 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(21) { // tag: 21 MAKE_TAG(2, WireFixed32=5)
										goto dict_tmp_89 // goto case 2
									}
									continue dict_tmp_88 // next tag for map[int32][]float32
								}
							case 2:
								if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
								dict_tmp_89:
									// type: []float32
									if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
										loop_tmp_90: for {
											var tmp_90 float32
											// type: float32
											if x, e := tmpi.ReadFixed32(); e == nil {
												tmp_90 = math.Float32frombits(x)
											} else {
												err = e
												return
											}
											tmp_89 = append(tmp_89, tmp_90)
											if !tmpi.ExpectBytes(21) { // tag: 21 MAKE_TAG(2, WireFixed32=5)
												break loop_tmp_90 // end for []float32
											}
										}
									} else if x, e := tmpi.ReadBuf(); e == nil {
										tmpii := &tygo.ProtoBuf{Buffer: x}
										var tmp_90 float32
										for !tmpii.ExpectEnd() {
											// type: float32
											if x, e := tmpii.ReadFixed32(); e == nil {
												tmp_90 = math.Float32frombits(x)
											} else {
												err = e
												return
											}
										}
										tmp_89 = append(tmp_89, tmp_90)
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_88 // end for map[int32][]float32
									}
									continue dict_tmp_88 // next tag for map[int32][]float32
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Fld[tmp_88] = tmp_89
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(226, 1) { // tag: 226 MAKE_TAG(28, WireBytes=2)
						break loop_tmp_88 // end for map[int32][]float32
					}
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(234, 1) { // tag: 234 MAKE_TAG(29, WireBytes=2)
					goto object_tmp_97 // goto case 10
				}
			}
		// property: s.Dd
		case 10:
			if tag == 234 { // MAKE_TAG(29, WireBytes=2)
			object_tmp_97:
				// type: map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
				loop_tmp_92: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_92 int32
						var tmp_93 map[int32]interface{}
						dict_tmp_92: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_92 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_93 // goto case 2
									}
									continue dict_tmp_92 // next tag for map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_93:
									// type: map[int32]variant<int32, Corpus, float64, string, *Vector2>
									loop_tmp_94: for {
										if x, e := tmpi.ReadBuf(); e == nil {
											tmpii := &tygo.ProtoBuf{Buffer: x}
											var tmp_94 int32
											var tmp_95 interface{}
											dict_tmp_94: for !tmpii.ExpectEnd() {
												var tmpig int
												if tmpig, err = tmpii.ReadTag(127); err != nil {
													return
												}
												switch tmpig >> 3 {
												// dict key
												case 1:
													if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
														// type: int32
														if x, e := tmpii.ReadVarint(); e == nil {
															tmp_94 = int32(x)
														} else {
															err = e
															return
														}
														if tmpii.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
															goto dict_tmp_95 // goto case 2
														}
														continue dict_tmp_94 // next tag for map[int32]variant<int32, Corpus, float64, string, *Vector2>
													}
												case 2:
													if tmpig == 18 { // MAKE_TAG(2, WireBytes=2)
													dict_tmp_95:
														// type: variant<int32, Corpus, float64, string, *Vector2>
														if x, e := tmpii.ReadBuf(); e == nil {
															tmpiii := &tygo.ProtoBuf{Buffer: x}
															variant_tmp_96: for !tmpiii.ExpectEnd() {
																var tmpiig int
																if tmpiig, err = tmpiii.ReadTag(127); err != nil {
																	return
																}
																switch tmpiig >> 3 {
															case 1:
																if tmpiig == 8 { // MAKE_TAG(1, WireVarint=0)
																	// type: int32
																	if x, e := tmpiii.ReadVarint(); e == nil {
																		tmp_95 = int32(x)
																	} else {
																		err = e
																		return
																	}
																	continue variant_tmp_96 // next tag for variant<int32, Corpus, float64, string, *Vector2>
																}
															case 2:
																if tmpiig == 16 { // MAKE_TAG(2, WireVarint=0)
																	// type: Corpus
																	if x, e := tmpiii.ReadVarint(); e == nil {
																		tmp_95 = Corpus(x)
																	} else {
																		err = e
																		return
																	}
																	continue variant_tmp_96 // next tag for variant<int32, Corpus, float64, string, *Vector2>
																}
															case 3:
																if tmpiig == 25 { // MAKE_TAG(3, WireFixed64=1)
																	// type: float64
																	if x, e := tmpiii.ReadFixed64(); e == nil {
																		tmp_95 = math.Float64frombits(x)
																	} else {
																		err = e
																		return
																	}
																	continue variant_tmp_96 // next tag for variant<int32, Corpus, float64, string, *Vector2>
																}
															case 4:
																if tmpiig == 34 { // MAKE_TAG(4, WireBytes=2)
																	// type: string
																	if x, e := tmpiii.ReadBuf(); e == nil {
																		tmp_95 = string(x)
																	} else {
																		err = e
																		return
																	}
																	continue variant_tmp_96 // next tag for variant<int32, Corpus, float64, string, *Vector2>
																}
															case 5:
																if tmpiig == 42 { // MAKE_TAG(5, WireBytes=2)
																	// type: *Vector2
																	if x, e := tmpiii.ReadBuf(); e == nil {
																		if tmp_95 == nil {
																			tmp_95 = &Vector2{}
																		}
																		if len(x) > 0 {
																			if err = tmp_95.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
																				return
																			}
																		}
																	} else {
																		err = e
																		return
																	}
																	continue variant_tmp_96 // next tag for variant<int32, Corpus, float64, string, *Vector2>
																}
																}
																if err = tmpiii.SkipField(tmpiig); err != nil {
																	return
																}
															}
														} else {
															err = e
															return
														}
														if tmpii.ExpectEnd() {
															break dict_tmp_94 // end for map[int32]variant<int32, Corpus, float64, string, *Vector2>
														}
														continue dict_tmp_94 // next tag for map[int32]variant<int32, Corpus, float64, string, *Vector2>
													}
												}
												if err = tmpii.SkipField(tmpig); err != nil {
													return
												}
											}
											tmp_93[tmp_94] = tmp_95
										} else {
											err = e
											return
										}
										if !tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
											break loop_tmp_94 // end for map[int32]variant<int32, Corpus, float64, string, *Vector2>
										}
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_92 // end for map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
									}
									continue dict_tmp_92 // next tag for map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Dd[tmp_92] = tmp_93
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(234, 1) { // tag: 234 MAKE_TAG(29, WireBytes=2)
						break loop_tmp_92 // end for map[int32]map[int32]variant<int32, Corpus, float64, string, *Vector2>
					}
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(242, 1) { // tag: 242 MAKE_TAG(30, WireBytes=2)
					goto object_tmp_102 // goto case 11
				}
			}
		// property: s.Fdd
		case 11:
			if tag == 242 { // MAKE_TAG(30, WireBytes=2)
			object_tmp_102:
				// type: map[int32]map[int32]float32
				loop_tmp_98: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_98 int32
						var tmp_99 map[int32]float32
						dict_tmp_98: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_98 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_99 // goto case 2
									}
									continue dict_tmp_98 // next tag for map[int32]map[int32]float32
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_99:
									// type: map[int32]float32
									loop_tmp_100: for {
										if x, e := tmpi.ReadBuf(); e == nil {
											tmpii := &tygo.ProtoBuf{Buffer: x}
											var tmp_100 int32
											var tmp_101 float32
											dict_tmp_100: for !tmpii.ExpectEnd() {
												var tmpig int
												if tmpig, err = tmpii.ReadTag(127); err != nil {
													return
												}
												switch tmpig >> 3 {
												// dict key
												case 1:
													if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
														// type: int32
														if x, e := tmpii.ReadVarint(); e == nil {
															tmp_100 = int32(x)
														} else {
															err = e
															return
														}
														if tmpii.ExpectBytes(21) { // tag: 21 MAKE_TAG(2, WireFixed32=5)
															goto dict_tmp_101 // goto case 2
														}
														continue dict_tmp_100 // next tag for map[int32]float32
													}
												case 2:
													if tmpig == 21 { // MAKE_TAG(2, WireFixed32=5)
													dict_tmp_101:
														// type: float32
														if x, e := tmpii.ReadFixed32(); e == nil {
															tmp_101 = math.Float32frombits(x)
														} else {
															err = e
															return
														}
														if tmpii.ExpectEnd() {
															break dict_tmp_100 // end for map[int32]float32
														}
														continue dict_tmp_100 // next tag for map[int32]float32
													}
												}
												if err = tmpii.SkipField(tmpig); err != nil {
													return
												}
											}
											tmp_99[tmp_100] = tmp_101
										} else {
											err = e
											return
										}
										if !tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
											break loop_tmp_100 // end for map[int32]float32
										}
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_98 // end for map[int32]map[int32]float32
									}
									continue dict_tmp_98 // next tag for map[int32]map[int32]float32
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						s.Fdd[tmp_98] = tmp_99
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(242, 1) { // tag: 242 MAKE_TAG(30, WireBytes=2)
						break loop_tmp_98 // end for map[int32]map[int32]float32
					}
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(250, 1) { // tag: 250 MAKE_TAG(31, WireBytes=2)
					goto object_tmp_104 // goto case 12
				}
			}
		// property: s.Nv
		case 12:
			if tag == 250 { // MAKE_TAG(31, WireBytes=2)
			object_tmp_104:
				// type: variant<nil, int32>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_103: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 2:
						if tmpg == 16 { // MAKE_TAG(2, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.Nv = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_103 // next tag for variant<nil, int32>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(130, 2) { // tag: 258 MAKE_TAG(32, WireBytes=2)
					goto object_tmp_108 // goto case 13
				}
			}
		// property: s.Lv
		case 13:
			if tag == 258 { // MAKE_TAG(32, WireBytes=2)
			object_tmp_108:
				// type: variant<int32, []variant<float32, string>>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_105: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.Lv = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_105 // next tag for variant<int32, []variant<float32, string>>
						}
					case 2:
						if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
							// type: []variant<float32, string>
							loop_tmp_106: for {
								var tmp_106 interface{}
								// type: variant<float32, string>
								if x, e := tmpi.ReadBuf(); e == nil {
									tmpii := &tygo.ProtoBuf{Buffer: x}
									variant_tmp_107: for !tmpii.ExpectEnd() {
										var tmpig int
										if tmpig, err = tmpii.ReadTag(127); err != nil {
											return
										}
										switch tmpig >> 3 {
									case 1:
										if tmpig == 13 { // MAKE_TAG(1, WireFixed32=5)
											// type: float32
											if x, e := tmpii.ReadFixed32(); e == nil {
												tmp_106 = math.Float32frombits(x)
											} else {
												err = e
												return
											}
											continue variant_tmp_107 // next tag for variant<float32, string>
										}
									case 2:
										if tmpig == 18 { // MAKE_TAG(2, WireBytes=2)
											// type: string
											if x, e := tmpii.ReadBuf(); e == nil {
												tmp_106 = string(x)
											} else {
												err = e
												return
											}
											continue variant_tmp_107 // next tag for variant<float32, string>
										}
										}
										if err = tmpii.SkipField(tmpig); err != nil {
											return
										}
									}
								} else {
									err = e
									return
								}
								s.Lv = append(s.Lv.([]interface{}), tmp_106)
								if !tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
									break loop_tmp_106 // end for []variant<float32, string>
								}
							}
							continue variant_tmp_105 // next tag for variant<int32, []variant<float32, string>>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(138, 2) { // tag: 266 MAKE_TAG(33, WireBytes=2)
					goto object_tmp_111 // goto case 14
				}
			}
		// property: s.Flv
		case 14:
			if tag == 266 { // MAKE_TAG(33, WireBytes=2)
			object_tmp_111:
				// type: variant<int32, []float32>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_109: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.Flv = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_109 // next tag for variant<int32, []float32>
						}
					case 2:
						if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
							// type: []float32
							if tmpg == 21 { // MAKE_TAG(2, WireFixed32=5)
								loop_tmp_110: for {
									var tmp_110 float32
									// type: float32
									if x, e := tmpi.ReadFixed32(); e == nil {
										tmp_110 = math.Float32frombits(x)
									} else {
										err = e
										return
									}
									s.Flv = append(s.Flv.([]float32), tmp_110)
									if !tmpi.ExpectBytes(21) { // tag: 21 MAKE_TAG(2, WireFixed32=5)
										break loop_tmp_110 // end for []float32
									}
								}
							} else if x, e := tmpi.ReadBuf(); e == nil {
								tmpii := &tygo.ProtoBuf{Buffer: x}
								var tmp_110 float32
								for !tmpii.ExpectEnd() {
									// type: float32
									if x, e := tmpii.ReadFixed32(); e == nil {
										tmp_110 = math.Float32frombits(x)
									} else {
										err = e
										return
									}
								}
								s.Flv = append(s.Flv.([]float32), tmp_110)
							} else {
								err = e
								return
							}
							continue variant_tmp_109 // next tag for variant<int32, []float32>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(146, 2) { // tag: 274 MAKE_TAG(34, WireBytes=2)
					goto object_tmp_116 // goto case 15
				}
			}
		// property: s.Dv
		case 15:
			if tag == 274 { // MAKE_TAG(34, WireBytes=2)
			object_tmp_116:
				// type: variant<int32, map[int32]variant<float32, string>>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_112: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.Dv = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_112 // next tag for variant<int32, map[int32]variant<float32, string>>
						}
					case 2:
						if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
							// type: map[int32]variant<float32, string>
							loop_tmp_113: for {
								if x, e := tmpi.ReadBuf(); e == nil {
									tmpii := &tygo.ProtoBuf{Buffer: x}
									var tmp_113 int32
									var tmp_114 interface{}
									dict_tmp_113: for !tmpii.ExpectEnd() {
										var tmpig int
										if tmpig, err = tmpii.ReadTag(127); err != nil {
											return
										}
										switch tmpig >> 3 {
										// dict key
										case 1:
											if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
												// type: int32
												if x, e := tmpii.ReadVarint(); e == nil {
													tmp_113 = int32(x)
												} else {
													err = e
													return
												}
												if tmpii.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
													goto dict_tmp_114 // goto case 2
												}
												continue dict_tmp_113 // next tag for map[int32]variant<float32, string>
											}
										case 2:
											if tmpig == 18 { // MAKE_TAG(2, WireBytes=2)
											dict_tmp_114:
												// type: variant<float32, string>
												if x, e := tmpii.ReadBuf(); e == nil {
													tmpiii := &tygo.ProtoBuf{Buffer: x}
													variant_tmp_115: for !tmpiii.ExpectEnd() {
														var tmpiig int
														if tmpiig, err = tmpiii.ReadTag(127); err != nil {
															return
														}
														switch tmpiig >> 3 {
													case 1:
														if tmpiig == 13 { // MAKE_TAG(1, WireFixed32=5)
															// type: float32
															if x, e := tmpiii.ReadFixed32(); e == nil {
																tmp_114 = math.Float32frombits(x)
															} else {
																err = e
																return
															}
															continue variant_tmp_115 // next tag for variant<float32, string>
														}
													case 2:
														if tmpiig == 18 { // MAKE_TAG(2, WireBytes=2)
															// type: string
															if x, e := tmpiii.ReadBuf(); e == nil {
																tmp_114 = string(x)
															} else {
																err = e
																return
															}
															continue variant_tmp_115 // next tag for variant<float32, string>
														}
														}
														if err = tmpiii.SkipField(tmpiig); err != nil {
															return
														}
													}
												} else {
													err = e
													return
												}
												if tmpii.ExpectEnd() {
													break dict_tmp_113 // end for map[int32]variant<float32, string>
												}
												continue dict_tmp_113 // next tag for map[int32]variant<float32, string>
											}
										}
										if err = tmpii.SkipField(tmpig); err != nil {
											return
										}
									}
									s.Dv.(map[int32]interface{})[tmp_113] = tmp_114
								} else {
									err = e
									return
								}
								if !tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
									break loop_tmp_113 // end for map[int32]variant<float32, string>
								}
							}
							continue variant_tmp_112 // next tag for variant<int32, map[int32]variant<float32, string>>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectBytes(154, 2) { // tag: 282 MAKE_TAG(35, WireBytes=2)
					goto object_tmp_120 // goto case 16
				}
			}
		// property: s.Fdv
		case 16:
			if tag == 282 { // MAKE_TAG(35, WireBytes=2)
			object_tmp_120:
				// type: variant<int32, map[int32]float32>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_117: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 1:
						if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								s.Fdv = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_117 // next tag for variant<int32, map[int32]float32>
						}
					case 2:
						if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
							// type: map[int32]float32
							loop_tmp_118: for {
								if x, e := tmpi.ReadBuf(); e == nil {
									tmpii := &tygo.ProtoBuf{Buffer: x}
									var tmp_118 int32
									var tmp_119 float32
									dict_tmp_118: for !tmpii.ExpectEnd() {
										var tmpig int
										if tmpig, err = tmpii.ReadTag(127); err != nil {
											return
										}
										switch tmpig >> 3 {
										// dict key
										case 1:
											if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
												// type: int32
												if x, e := tmpii.ReadVarint(); e == nil {
													tmp_118 = int32(x)
												} else {
													err = e
													return
												}
												if tmpii.ExpectBytes(21) { // tag: 21 MAKE_TAG(2, WireFixed32=5)
													goto dict_tmp_119 // goto case 2
												}
												continue dict_tmp_118 // next tag for map[int32]float32
											}
										case 2:
											if tmpig == 21 { // MAKE_TAG(2, WireFixed32=5)
											dict_tmp_119:
												// type: float32
												if x, e := tmpii.ReadFixed32(); e == nil {
													tmp_119 = math.Float32frombits(x)
												} else {
													err = e
													return
												}
												if tmpii.ExpectEnd() {
													break dict_tmp_118 // end for map[int32]float32
												}
												continue dict_tmp_118 // next tag for map[int32]float32
											}
										}
										if err = tmpii.SkipField(tmpig); err != nil {
											return
										}
									}
									s.Fdv.(map[int32]float32)[tmp_118] = tmp_119
								} else {
									err = e
									return
								}
								if !tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
									break loop_tmp_118 // end for map[int32]float32
								}
							}
							continue variant_tmp_117 // next tag for variant<int32, map[int32]float32>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue object_tmp_66 // next tag for Fighter
				if input.ExpectEnd() {
					break object_tmp_66 // end for Fighter
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}

// RPG Param(a0: *Fighter, a1: variant<nil, int32>, a2: fixedpoint<3, 0>)
func (s *Fighter) SerializeRPGParam(a0 *Fighter, a1 interface{}, a2 float64) (data []byte) {
	size := 0
	// param size: a0
	// type: *Fighter
	if a0 != nil {
		tmp := a0.ByteSize()
		size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
	}

	// param size: a1
	// type: variant<nil, int32>
	if a1 != nil {
		tmp := 0
		switch v := a1.(type) {
		// variant type: int32
		case int32:
			// type: int32
			tmp += 1 + tygo.SizeVarint(uint64(v))
		// addition type: int
		case int:
			tmp += 1 + tygo.SizeVarint(uint64(v))
		default:
			panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
		}
		size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
	}

	// param size: a2
	// type: fixedpoint<3, 0>
	if a2 != 0 {
		size += 1 + tygo.SizeVarint(uint64((a2 - 0) * 1000))
	}

	if size <= 0 {
		return
	}
	data = make([]byte, size)
	output := &tygo.ProtoBuf{Buffer: data}

	// param serialize: a0
	// type: *Fighter
	if a0 != nil {
		output.WriteBytes(10) // tag: 10 MAKE_TAG(1, WireBytes=2)
		output.WriteVarint(uint64(a0.CachedSize()))
		a0.Serialize(output)
	}

	// param serialize: a1
	// type: variant<nil, int32>
	if a1 != nil {
		tmp := 0
		switch v := a1.(type) {
		// variant type size: int32
		case int32:
			// type: int32
			tmp += 1 + tygo.SizeVarint(uint64(v))
		// addition type size: int
		case int:
			tmp += 1 + tygo.SizeVarint(uint64(v))
		default:
			panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
		}
		output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
		output.WriteVarint(uint64(tmp))
		switch v := a1.(type) {
		// variant type serialize: int32
		case int32:
			// type: int32
			output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
			output.WriteVarint(uint64(v))
		// addition type serialize: int
		case int:
			output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
			output.WriteVarint(uint64(v))
		default:
			panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
		}
	}

	// param serialize: a2
	// type: fixedpoint<3, 0>
	if a2 != 0 {
		output.WriteBytes(24) // tag: 24 MAKE_TAG(3, WireVarint=0)
		output.WriteVarint(uint64((a2 - 0) * 1000))
	}

	return
}

// RPG Param(a0: *Fighter, a1: variant<nil, int32>, a2: fixedpoint<3, 0>)
func (s *Fighter) DeserializeRPGParam(data []byte) (a0 *Fighter, a1 interface{}, a2 float64, err error) {
	input := &tygo.ProtoBuf{Buffer: data}
	method_tmp_50: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(((3 << 3) | 7)); err != nil {
			return
		}
		switch tag >> 3 {
		// param deserialize: a0
		case 1:
			if tag == 10 { // MAKE_TAG(1, WireBytes=2) // MAKE_TAG(1, WireBytes=2)
				// type: variant<nil, int32>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_51: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 2:
						if tmpg == 16 { // MAKE_TAG(2, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								a1 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_51 // next tag for variant<nil, int32>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue method_tmp_50 // next tag for param
				if input.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
					goto method_tmp_52 // goto case 2
				}
			}
		// param deserialize: a1
		case 2:
			if tag == 16 { // MAKE_TAG(2, WireVarint=0) // MAKE_TAG(2, WireBytes=2)
			method_tmp_52:
				// type: fixedpoint<3, 0>
				if x, e := input.ReadVarint(); e == nil {
					a2 = float64(x) / 1000 + 0
				} else {
					err = e
					return
				}
				continue method_tmp_50 // next tag for param
				if input.ExpectBytes(24) { // tag: 24 MAKE_TAG(3, WireVarint=0)
					goto method_tmp_53 // goto case 3
				}
			}
		// param deserialize: a2
		case 3:
			if tag == 24 { // MAKE_TAG(3, WireVarint=0) // MAKE_TAG(3, WireVarint=0)
			method_tmp_53:
				// type: fixedpoint<3, 0>
				if x, e := input.ReadVarint(); e == nil {
					a2 = float64(x) / 1000 + 0
				} else {
					err = e
					return
				}
				continue method_tmp_50 // next tag for param
				if input.ExpectEnd() {
					break method_tmp_50 // end for param
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}

// RPG Result(a0: *Fighter, a1: variant<nil, int32>, a2: fixedpoint<3, 0>)
func (s *Fighter) SerializeRPGResult(a0 *Fighter, a1 interface{}, a2 float64) (data []byte) {
	size := 0
	// result size: a0
	// type: *Fighter
	if a0 != nil {
		tmp := a0.ByteSize()
		size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
	}

	// result size: a1
	// type: variant<nil, int32>
	if a1 != nil {
		tmp := 0
		switch v := a1.(type) {
		// variant type: int32
		case int32:
			// type: int32
			tmp += 1 + tygo.SizeVarint(uint64(v))
		// addition type: int
		case int:
			tmp += 1 + tygo.SizeVarint(uint64(v))
		default:
			panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
		}
		size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
	}

	// result size: a2
	// type: fixedpoint<3, 0>
	if a2 != 0 {
		size += 1 + tygo.SizeVarint(uint64((a2 - 0) * 1000))
	}

	if size <= 0 {
		return
	}
	data = make([]byte, size)
	output := &tygo.ProtoBuf{Buffer: data}

	// result serialize: a0
	// type: *Fighter
	if a0 != nil {
		output.WriteBytes(10) // tag: 10 MAKE_TAG(1, WireBytes=2)
		output.WriteVarint(uint64(a0.CachedSize()))
		a0.Serialize(output)
	}

	// result serialize: a1
	// type: variant<nil, int32>
	if a1 != nil {
		tmp := 0
		switch v := a1.(type) {
		// variant type size: int32
		case int32:
			// type: int32
			tmp += 1 + tygo.SizeVarint(uint64(v))
		// addition type size: int
		case int:
			tmp += 1 + tygo.SizeVarint(uint64(v))
		default:
			panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
		}
		output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
		output.WriteVarint(uint64(tmp))
		switch v := a1.(type) {
		// variant type serialize: int32
		case int32:
			// type: int32
			output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
			output.WriteVarint(uint64(v))
		// addition type serialize: int
		case int:
			output.WriteBytes(16) // tag: 16 MAKE_TAG(2, WireVarint=0)
			output.WriteVarint(uint64(v))
		default:
			panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<nil, int32>: %v", v))
		}
	}

	// result serialize: a2
	// type: fixedpoint<3, 0>
	if a2 != 0 {
		output.WriteBytes(24) // tag: 24 MAKE_TAG(3, WireVarint=0)
		output.WriteVarint(uint64((a2 - 0) * 1000))
	}

	return
}

// RPG Result(a0: *Fighter, a1: variant<nil, int32>, a2: fixedpoint<3, 0>)
func (s *Fighter) DeserializeRPGResult(data []byte) (a0 *Fighter, a1 interface{}, a2 float64, err error) {
	input := &tygo.ProtoBuf{Buffer: data}
	method_tmp_54: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(((3 << 3) | 7)); err != nil {
			return
		}
		switch tag >> 3 {
		// result deserialize: a0
		case 1:
			if tag == 10 { // MAKE_TAG(1, WireBytes=2) // MAKE_TAG(1, WireBytes=2)
				// type: variant<nil, int32>
				if x, e := input.ReadBuf(); e == nil {
					tmpi := &tygo.ProtoBuf{Buffer: x}
					variant_tmp_55: for !tmpi.ExpectEnd() {
						var tmpg int
						if tmpg, err = tmpi.ReadTag(127); err != nil {
							return
						}
						switch tmpg >> 3 {
					case 2:
						if tmpg == 16 { // MAKE_TAG(2, WireVarint=0)
							// type: int32
							if x, e := tmpi.ReadVarint(); e == nil {
								a1 = int32(x)
							} else {
								err = e
								return
							}
							continue variant_tmp_55 // next tag for variant<nil, int32>
						}
						}
						if err = tmpi.SkipField(tmpg); err != nil {
							return
						}
					}
				} else {
					err = e
					return
				}
				continue method_tmp_54 // next tag for result
				if input.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
					goto method_tmp_56 // goto case 2
				}
			}
		// result deserialize: a1
		case 2:
			if tag == 16 { // MAKE_TAG(2, WireVarint=0) // MAKE_TAG(2, WireBytes=2)
			method_tmp_56:
				// type: fixedpoint<3, 0>
				if x, e := input.ReadVarint(); e == nil {
					a2 = float64(x) / 1000 + 0
				} else {
					err = e
					return
				}
				continue method_tmp_54 // next tag for result
				if input.ExpectBytes(24) { // tag: 24 MAKE_TAG(3, WireVarint=0)
					goto method_tmp_57 // goto case 3
				}
			}
		// result deserialize: a2
		case 3:
			if tag == 24 { // MAKE_TAG(3, WireVarint=0) // MAKE_TAG(3, WireVarint=0)
			method_tmp_57:
				// type: fixedpoint<3, 0>
				if x, e := input.ReadVarint(); e == nil {
					a2 = float64(x) / 1000 + 0
				} else {
					err = e
					return
				}
				continue method_tmp_54 // next tag for result
				if input.ExpectEnd() {
					break method_tmp_54 // end for result
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}

// GPR Param(a0: map[int32]variant<Corpus, float64, string, *Vector2>)
func (s *Fighter) SerializeGPRParam(a0 map[int32]interface{}) (data []byte) {
	size := 0
	// param size: a0
	// type: map[int32]variant<Corpus, float64, string, *Vector2>
	if len(a0) > 0 {
		for k, v := range a0 {
			tmp := 0
			// dict key
			// type: int32
			if k != 0 {
				tmp += 1 + tygo.SizeVarint(uint64(k))
			}
			// dict value
			// type: variant<Corpus, float64, string, *Vector2>
			if v != nil {
				tmpp := 0
				switch v := v.(type) {
				// variant type: Corpus
				case Corpus:
					// type: Corpus
					tmpp += 1 + tygo.SizeVarint(uint64(v))
				// variant type: float64
				case float64:
					// type: float64
					tmpp += 1 + 8
				// variant type: string
				case string:
					// type: string
					{
						l := len([]byte(v))
						tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
					}
				// variant type: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						tmppp := v.ByteSize()
						tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
					}
				// addition type: int -> float64
				case int:
					tmpp += 9
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
				tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
			}
			size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
		}
	}

	if size <= 0 {
		return
	}
	data = make([]byte, size)
	output := &tygo.ProtoBuf{Buffer: data}

	// param serialize: a0
	// type: map[int32]variant<Corpus, float64, string, *Vector2>
	if len(a0) > 0 {
		for k, v := range a0 {
			tmp := 0
			// dict key size
			// type: int32
			if k != 0 {
				tmp += 1 + tygo.SizeVarint(uint64(k))
			}
			// dict value size
			// type: variant<Corpus, float64, string, *Vector2>
			if v != nil {
				tmpp := 0
				switch v := v.(type) {
				// variant type: Corpus
				case Corpus:
					// type: Corpus
					tmpp += 1 + tygo.SizeVarint(uint64(v))
				// variant type: float64
				case float64:
					// type: float64
					tmpp += 1 + 8
				// variant type: string
				case string:
					// type: string
					{
						l := len([]byte(v))
						tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
					}
				// variant type: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						tmppp := v.CachedSize()
						tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
					}
				// addition type: int -> float64
				case int:
					tmpp += 9
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
				tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
			}
			output.WriteBytes(10) // tag: 10 MAKE_TAG(1, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			// dict key serialize
			// type: int32
			if k != 0 {
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(k))
			}
			// dict value serialize
			// type: variant<Corpus, float64, string, *Vector2>
			if v != nil {
				tmpp := 0
				switch v := v.(type) {
				// variant type size: Corpus
				case Corpus:
					// type: Corpus
					tmpp += 1 + tygo.SizeVarint(uint64(v))
				// variant type size: float64
				case float64:
					// type: float64
					tmpp += 1 + 8
				// variant type size: string
				case string:
					// type: string
					{
						l := len([]byte(v))
						tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
					}
				// variant type size: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						tmppp := v.CachedSize()
						tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
					}
				// addition type size: int -> float64
				case int:
					tmpp += 9
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
				output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
				output.WriteVarint(uint64(tmpp))
				switch v := v.(type) {
				// variant type serialize: Corpus
				case Corpus:
					// type: Corpus
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(v))
				// variant type serialize: float64
				case float64:
					// type: float64
					output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
					output.WriteFixed64(math.Float64bits(v))
				// variant type serialize: string
				case string:
					// type: string
					{
						output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
						output.WriteBuf([]byte(v))
					}
				// variant type serialize: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
						output.WriteVarint(uint64(v.CachedSize()))
						v.Serialize(output)
					}
				// addition type serialize: int -> float64
				case int:
					output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
					output.WriteFixed64(math.Float64bits(float64(v)))
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
			}
		}
	}

	return
}

// GPR Param(a0: map[int32]variant<Corpus, float64, string, *Vector2>)
func (s *Fighter) DeserializeGPRParam(data []byte) (a0 map[int32]interface{}, err error) {
	input := &tygo.ProtoBuf{Buffer: data}
	method_tmp_58: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(((1 << 3) | 7)); err != nil {
			return
		}
		switch tag >> 3 {
		// param deserialize: a0
		case 1:
			if tag == 10 { // MAKE_TAG(1, WireBytes=2) // MAKE_TAG(1, WireBytes=2)
				// type: map[int32]variant<Corpus, float64, string, *Vector2>
				loop_tmp_59: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_59 int32
						var tmp_60 interface{}
						dict_tmp_59: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_59 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_60 // goto case 2
									}
									continue dict_tmp_59 // next tag for map[int32]variant<Corpus, float64, string, *Vector2>
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_60:
									// type: variant<Corpus, float64, string, *Vector2>
									if x, e := tmpi.ReadBuf(); e == nil {
										tmpii := &tygo.ProtoBuf{Buffer: x}
										variant_tmp_61: for !tmpii.ExpectEnd() {
											var tmpig int
											if tmpig, err = tmpii.ReadTag(127); err != nil {
												return
											}
											switch tmpig >> 3 {
										case 1:
											if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
												// type: Corpus
												if x, e := tmpii.ReadVarint(); e == nil {
													tmp_60 = Corpus(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_61 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 2:
											if tmpig == 17 { // MAKE_TAG(2, WireFixed64=1)
												// type: float64
												if x, e := tmpii.ReadFixed64(); e == nil {
													tmp_60 = math.Float64frombits(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_61 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 3:
											if tmpig == 26 { // MAKE_TAG(3, WireBytes=2)
												// type: string
												if x, e := tmpii.ReadBuf(); e == nil {
													tmp_60 = string(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_61 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 4:
											if tmpig == 34 { // MAKE_TAG(4, WireBytes=2)
												// type: *Vector2
												if x, e := tmpii.ReadBuf(); e == nil {
													if tmp_60 == nil {
														tmp_60 = &Vector2{}
													}
													if len(x) > 0 {
														if err = tmp_60.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
															return
														}
													}
												} else {
													err = e
													return
												}
												continue variant_tmp_61 // next tag for variant<Corpus, float64, string, *Vector2>
											}
											}
											if err = tmpii.SkipField(tmpig); err != nil {
												return
											}
										}
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_59 // end for map[int32]variant<Corpus, float64, string, *Vector2>
									}
									continue dict_tmp_59 // next tag for map[int32]variant<Corpus, float64, string, *Vector2>
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						a0[tmp_59] = tmp_60
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(10) { // tag: 10 MAKE_TAG(1, WireBytes=2)
						break loop_tmp_59 // end for map[int32]variant<Corpus, float64, string, *Vector2>
					}
				}
				continue method_tmp_58 // next tag for param
				if input.ExpectEnd() {
					break method_tmp_58 // end for param
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}

// GPR Result(a0: map[int32]variant<Corpus, float64, string, *Vector2>)
func (s *Fighter) SerializeGPRResult(a0 map[int32]interface{}) (data []byte) {
	size := 0
	// result size: a0
	// type: map[int32]variant<Corpus, float64, string, *Vector2>
	if len(a0) > 0 {
		for k, v := range a0 {
			tmp := 0
			// dict key
			// type: int32
			if k != 0 {
				tmp += 1 + tygo.SizeVarint(uint64(k))
			}
			// dict value
			// type: variant<Corpus, float64, string, *Vector2>
			if v != nil {
				tmpp := 0
				switch v := v.(type) {
				// variant type: Corpus
				case Corpus:
					// type: Corpus
					tmpp += 1 + tygo.SizeVarint(uint64(v))
				// variant type: float64
				case float64:
					// type: float64
					tmpp += 1 + 8
				// variant type: string
				case string:
					// type: string
					{
						l := len([]byte(v))
						tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
					}
				// variant type: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						tmppp := v.ByteSize()
						tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
					}
				// addition type: int -> float64
				case int:
					tmpp += 9
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
				tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
			}
			size += 1 + tygo.SizeVarint(uint64(tmp)) + tmp
		}
	}

	if size <= 0 {
		return
	}
	data = make([]byte, size)
	output := &tygo.ProtoBuf{Buffer: data}

	// result serialize: a0
	// type: map[int32]variant<Corpus, float64, string, *Vector2>
	if len(a0) > 0 {
		for k, v := range a0 {
			tmp := 0
			// dict key size
			// type: int32
			if k != 0 {
				tmp += 1 + tygo.SizeVarint(uint64(k))
			}
			// dict value size
			// type: variant<Corpus, float64, string, *Vector2>
			if v != nil {
				tmpp := 0
				switch v := v.(type) {
				// variant type: Corpus
				case Corpus:
					// type: Corpus
					tmpp += 1 + tygo.SizeVarint(uint64(v))
				// variant type: float64
				case float64:
					// type: float64
					tmpp += 1 + 8
				// variant type: string
				case string:
					// type: string
					{
						l := len([]byte(v))
						tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
					}
				// variant type: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						tmppp := v.CachedSize()
						tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
					}
				// addition type: int -> float64
				case int:
					tmpp += 9
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
				tmp += 1 + tygo.SizeVarint(uint64(tmpp)) + tmpp
			}
			output.WriteBytes(10) // tag: 10 MAKE_TAG(1, WireBytes=2)
			output.WriteVarint(uint64(tmp))
			// dict key serialize
			// type: int32
			if k != 0 {
				output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
				output.WriteVarint(uint64(k))
			}
			// dict value serialize
			// type: variant<Corpus, float64, string, *Vector2>
			if v != nil {
				tmpp := 0
				switch v := v.(type) {
				// variant type size: Corpus
				case Corpus:
					// type: Corpus
					tmpp += 1 + tygo.SizeVarint(uint64(v))
				// variant type size: float64
				case float64:
					// type: float64
					tmpp += 1 + 8
				// variant type size: string
				case string:
					// type: string
					{
						l := len([]byte(v))
						tmpp += 1 + tygo.SizeVarint(uint64(l)) + l
					}
				// variant type size: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						tmppp := v.CachedSize()
						tmpp += 1 + tygo.SizeVarint(uint64(tmppp)) + tmppp
					}
				// addition type size: int -> float64
				case int:
					tmpp += 9
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
				output.WriteBytes(18) // tag: 18 MAKE_TAG(2, WireBytes=2)
				output.WriteVarint(uint64(tmpp))
				switch v := v.(type) {
				// variant type serialize: Corpus
				case Corpus:
					// type: Corpus
					output.WriteBytes(8) // tag: 8 MAKE_TAG(1, WireVarint=0)
					output.WriteVarint(uint64(v))
				// variant type serialize: float64
				case float64:
					// type: float64
					output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
					output.WriteFixed64(math.Float64bits(v))
				// variant type serialize: string
				case string:
					// type: string
					{
						output.WriteBytes(26) // tag: 26 MAKE_TAG(3, WireBytes=2)
						output.WriteBuf([]byte(v))
					}
				// variant type serialize: *Vector2
				case *Vector2:
					// type: *Vector2
					{
						output.WriteBytes(34) // tag: 34 MAKE_TAG(4, WireBytes=2)
						output.WriteVarint(uint64(v.CachedSize()))
						v.Serialize(output)
					}
				// addition type serialize: int -> float64
				case int:
					output.WriteBytes(17) // tag: 17 MAKE_TAG(2, WireFixed64=1)
					output.WriteFixed64(math.Float64bits(float64(v)))
				default:
					panic(fmt.Sprintf("[Tygo][Variant] Unexpect type for variant<Corpus, float64, string, *Vector2>: %v", v))
				}
			}
		}
	}

	return
}

// GPR Result(a0: map[int32]variant<Corpus, float64, string, *Vector2>)
func (s *Fighter) DeserializeGPRResult(data []byte) (a0 map[int32]interface{}, err error) {
	input := &tygo.ProtoBuf{Buffer: data}
	method_tmp_62: for !input.ExpectEnd() {
		var tag int
		if tag, err = input.ReadTag(((1 << 3) | 7)); err != nil {
			return
		}
		switch tag >> 3 {
		// result deserialize: a0
		case 1:
			if tag == 10 { // MAKE_TAG(1, WireBytes=2) // MAKE_TAG(1, WireBytes=2)
				// type: map[int32]variant<Corpus, float64, string, *Vector2>
				loop_tmp_63: for {
					if x, e := input.ReadBuf(); e == nil {
						tmpi := &tygo.ProtoBuf{Buffer: x}
						var tmp_63 int32
						var tmp_64 interface{}
						dict_tmp_63: for !tmpi.ExpectEnd() {
							var tmpg int
							if tmpg, err = tmpi.ReadTag(127); err != nil {
								return
							}
							switch tmpg >> 3 {
							// dict key
							case 1:
								if tmpg == 8 { // MAKE_TAG(1, WireVarint=0)
									// type: int32
									if x, e := tmpi.ReadVarint(); e == nil {
										tmp_63 = int32(x)
									} else {
										err = e
										return
									}
									if tmpi.ExpectBytes(18) { // tag: 18 MAKE_TAG(2, WireBytes=2)
										goto dict_tmp_64 // goto case 2
									}
									continue dict_tmp_63 // next tag for map[int32]variant<Corpus, float64, string, *Vector2>
								}
							case 2:
								if tmpg == 18 { // MAKE_TAG(2, WireBytes=2)
								dict_tmp_64:
									// type: variant<Corpus, float64, string, *Vector2>
									if x, e := tmpi.ReadBuf(); e == nil {
										tmpii := &tygo.ProtoBuf{Buffer: x}
										variant_tmp_65: for !tmpii.ExpectEnd() {
											var tmpig int
											if tmpig, err = tmpii.ReadTag(127); err != nil {
												return
											}
											switch tmpig >> 3 {
										case 1:
											if tmpig == 8 { // MAKE_TAG(1, WireVarint=0)
												// type: Corpus
												if x, e := tmpii.ReadVarint(); e == nil {
													tmp_64 = Corpus(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_65 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 2:
											if tmpig == 17 { // MAKE_TAG(2, WireFixed64=1)
												// type: float64
												if x, e := tmpii.ReadFixed64(); e == nil {
													tmp_64 = math.Float64frombits(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_65 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 3:
											if tmpig == 26 { // MAKE_TAG(3, WireBytes=2)
												// type: string
												if x, e := tmpii.ReadBuf(); e == nil {
													tmp_64 = string(x)
												} else {
													err = e
													return
												}
												continue variant_tmp_65 // next tag for variant<Corpus, float64, string, *Vector2>
											}
										case 4:
											if tmpig == 34 { // MAKE_TAG(4, WireBytes=2)
												// type: *Vector2
												if x, e := tmpii.ReadBuf(); e == nil {
													if tmp_64 == nil {
														tmp_64 = &Vector2{}
													}
													if len(x) > 0 {
														if err = tmp_64.(*Vector2).Deserialize(&tygo.ProtoBuf{Buffer: x}); err != nil {
															return
														}
													}
												} else {
													err = e
													return
												}
												continue variant_tmp_65 // next tag for variant<Corpus, float64, string, *Vector2>
											}
											}
											if err = tmpii.SkipField(tmpig); err != nil {
												return
											}
										}
									} else {
										err = e
										return
									}
									if tmpi.ExpectEnd() {
										break dict_tmp_63 // end for map[int32]variant<Corpus, float64, string, *Vector2>
									}
									continue dict_tmp_63 // next tag for map[int32]variant<Corpus, float64, string, *Vector2>
								}
							}
							if err = tmpi.SkipField(tmpg); err != nil {
								return
							}
						}
						a0[tmp_63] = tmp_64
					} else {
						err = e
						return
					}
					if !input.ExpectBytes(10) { // tag: 10 MAKE_TAG(1, WireBytes=2)
						break loop_tmp_63 // end for map[int32]variant<Corpus, float64, string, *Vector2>
					}
				}
				continue method_tmp_62 // next tag for result
				if input.ExpectEnd() {
					break method_tmp_62 // end for result
				}
			}
		}
		if err = input.SkipField(tag); err != nil {
			return
		}
	}
	return
}
